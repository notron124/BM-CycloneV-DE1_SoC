
DE1-SoC_demo_nios.elf:     file format elf32-littlenios2
DE1-SoC_demo_nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000027d4 memsz 0x000027d4 flags r-x
    LOAD off    0x000037f4 vaddr 0x040027f4 paddr 0x04003e4c align 2**12
         filesz 0x00001658 memsz 0x00001658 flags rw-
    LOAD off    0x000054a4 vaddr 0x040054a4 paddr 0x040054a4 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002600  040001bc  040001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  040027bc  040027bc  000037bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001658  040027f4  04003e4c  000037f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  040054a4  040054a4  000054a4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  040055c0  040055c0  00004e4c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00004e4c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005f0  00000000  00000000  00004e70  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007719  00000000  00000000  00005460  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a52  00000000  00000000  0000cb79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002bc7  00000000  00000000  0000f5cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b6c  00000000  00000000  00012194  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000017c3  00000000  00000000  00012d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009f7  00000000  00000000  000144c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00014ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  00014f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00016c57  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00016c5a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00016c66  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00016c67  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00016c68  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00016c6c  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00016c70  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00016c74  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00016c7f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00016c8a  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00016c95  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000041  00000000  00000000  00016c9f  2**0
                  CONTENTS, READONLY
 29 .jdi          0000499c  00000000  00000000  00016ce0  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     002b9130  00000000  00000000  0001b67c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001bc l    d  .text	00000000 .text
040027bc l    d  .rodata	00000000 .rodata
040027f4 l    d  .rwdata	00000000 .rwdata
040054a4 l    d  .bss	00000000 .bss
040055c0 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/repos/quartus_proj/BM-CycloneV-DE1_SoC/DE1_SoC_demo/sw/nios/application/DE1-SoC_demo_nios_bsp//obj/HAL/src/crt0.o
04000204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
04000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 nios.c
00000000 l    df *ABS*	00000000 alt_load.c
04000310 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400049c l     F .text	00000038 alt_dev_reg
040027f4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04000778 l     F .text	00000204 altera_avalon_jtag_uart_irq
0400097c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
04001234 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04001398 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
040013c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04001870 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040019a8 l     F .text	00000050 alt_get_errno
040019f8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
040039fc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0400265c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
040003f4 g     F .text	00000078 alt_main
040054c0 g     O .bss	00000100 alt_irq
04003e4c g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
04000000 g     F .entry	0000001c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
040054bc g     O .bss	00000004 errno
04000208 g     F .text	000000dc rotate_leds
040054a8 g     O .bss	00000004 alt_argv
0400be20 g       *ABS*	00000000 _gp
0400046c g     F .text	00000030 usleep
0400387c g     O .rwdata	00000180 alt_fd_list
04001e38 g     F .text	00000090 alt_find_dev
040021e4 g     F .text	00000138 memcpy
04001930 g     F .text	00000078 alt_io_redirect
040027bc g       *ABS*	00000000 __DTOR_END__
04000b78 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
04002778 g     F .text	00000008 .hidden __udivsi3
04002090 g     F .text	0000008c alt_icache_flush
04003e30 g     O .rwdata	00000004 alt_max_fd
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
04003e44 g     O .rwdata	00000004 _global_impure_ptr
040055c0 g       *ABS*	00000000 __bss_end
04001780 g     F .text	000000f0 alt_iic_isr_register
04001d14 g     F .text	00000104 alt_tick
04001734 g     F .text	0000004c alt_ic_irq_enabled
04001c7c g     F .text	00000098 alt_alarm_stop
040054b0 g     O .bss	00000004 alt_irq_active
040000ec g     F .exceptions	000000d0 alt_irq_handler
04003854 g     O .rwdata	00000028 alt_dev_null
04001354 g     F .text	00000044 alt_dcache_flush_all
04003e4c g       *ABS*	00000000 __ram_rwdata_end
04003e28 g     O .rwdata	00000008 alt_dev_list
040027f4 g       *ABS*	00000000 __ram_rodata_end
04002780 g     F .text	00000008 .hidden __umodsi3
040055c0 g       *ABS*	00000000 end
040006b4 g     F .text	000000c4 altera_avalon_jtag_uart_init
040027bc g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04000d84 g     F .text	00000218 altera_avalon_jtag_uart_write
040024c8 g     F .text	00000194 __call_exitprocs
040001bc g     F .text	0000004c _start
040054b4 g     O .bss	00000004 _alt_tick_rate
040054b8 g     O .bss	00000004 _alt_nticks
04000508 g     F .text	00000048 alt_sys_init
040023b4 g     F .text	00000114 __register_exitproc
04000a24 g     F .text	00000068 altera_avalon_jtag_uart_close
040027f4 g       *ABS*	00000000 __ram_rwdata_start
040027bc g       *ABS*	00000000 __ram_rodata_start
04000550 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04001fdc g     F .text	000000b4 alt_get_fd
040010dc g     F .text	00000158 alt_busy_sleep
04002168 g     F .text	0000007c memcmp
04000610 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040055c0 g       *ABS*	00000000 __alt_stack_base
04000660 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04001ec8 g     F .text	00000114 alt_find_file
04001414 g     F .text	000000a4 alt_dev_llist_insert
040054a4 g       *ABS*	00000000 __bss_start
040002e4 g     F .text	0000002c main
040054ac g     O .bss	00000004 alt_envp
040005b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04003e34 g     O .rwdata	00000004 alt_errno
040026c8 g     F .text	00000054 .hidden __divsi3
040027bc g       *ABS*	00000000 __CTOR_END__
040027bc g       *ABS*	00000000 __flash_rodata_start
040027bc g       *ABS*	00000000 __DTOR_LIST__
040004d4 g     F .text	00000034 alt_irq_init
04001c1c g     F .text	00000060 alt_release_fd
0400211c g     F .text	00000014 atexit
04003e48 g     O .rwdata	00000004 _impure_ptr
040054a4 g     O .bss	00000004 alt_argc
04001514 g     F .text	0000005c _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
04003e20 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
040015a0 g     F .text	00000050 alt_ic_isr_register
04003e4c g       *ABS*	00000000 _edata
040055c0 g       *ABS*	00000000 _end
040001bc g       *ABS*	00000000 __ram_exceptions_end
04000a8c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
04001690 g     F .text	000000a4 alt_ic_irq_disable
04001e18 g     F .text	00000020 altera_nios2_qsys_irq_init
04002130 g     F .text	00000038 exit
0400271c g     F .text	0000005c .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04002788 g     F .text	00000034 _exit
04000f9c g     F .text	00000140 alt_alarm_start
0400231c g     F .text	00000098 strlen
04001ac4 g     F .text	00000158 open
04001570 g     F .text	00000030 alt_icache_flush_all
04003e38 g     O .rwdata	00000004 alt_priority_mask
040015f0 g     F .text	000000a0 alt_ic_irq_enable
04003e3c g     O .rwdata	00000008 alt_alarm_list
040014b8 g     F .text	0000005c _do_ctors
04001284 g     F .text	000000d0 close
04000374 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08406f14 	ori	at,at,444
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__reset-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)

04000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0fffb17 	ldw	r3,-20(fp)
 4000120:	e0bffc17 	ldw	r2,-16(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	10001426 	beq	r2,zero,400017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	00810034 	movhi	r2,1024
 4000130:	10953004 	addi	r2,r2,21696
 4000134:	e0fffd17 	ldw	r3,-12(fp)
 4000138:	180690fa 	slli	r3,r3,3
 400013c:	10c5883a 	add	r2,r2,r3
 4000140:	10c00017 	ldw	r3,0(r2)
 4000144:	00810034 	movhi	r2,1024
 4000148:	10953004 	addi	r2,r2,21696
 400014c:	e13ffd17 	ldw	r4,-12(fp)
 4000150:	200890fa 	slli	r4,r4,3
 4000154:	21000104 	addi	r4,r4,4
 4000158:	1105883a 	add	r2,r2,r4
 400015c:	10800017 	ldw	r2,0(r2)
 4000160:	1009883a 	mov	r4,r2
 4000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400016c:	0005313a 	rdctl	r2,ipending
 4000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000174:	e0bfff17 	ldw	r2,-4(fp)
 4000178:	00000706 	br	4000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400017c:	e0bffc17 	ldw	r2,-16(fp)
 4000180:	1085883a 	add	r2,r2,r2
 4000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000188:	e0bffd17 	ldw	r2,-12(fp)
 400018c:	10800044 	addi	r2,r2,1
 4000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 4000194:	003fe106 	br	400011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 4000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 400019c:	e0bffb17 	ldw	r2,-20(fp)
 40001a0:	103fdb1e 	bne	r2,zero,4000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001a4:	0001883a 	nop
}
 40001a8:	e037883a 	mov	sp,fp
 40001ac:	dfc00117 	ldw	ra,4(sp)
 40001b0:	df000017 	ldw	fp,0(sp)
 40001b4:	dec00204 	addi	sp,sp,8
 40001b8:	f800283a 	ret

Disassembly of section .text:

040001bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 40001bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 40001c0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 40001c4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 40001c8:	00bffd16 	blt	zero,r2,40001c0 <__alt_data_end+0xfc0001c0>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001cc:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 40001d0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 40001d4:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 40001d8:	d6af8814 	ori	gp,gp,48672
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001dc:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 40001e0:	10952914 	ori	r2,r2,21668

    movhi r3, %hi(__bss_end)
 40001e4:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 40001e8:	18d57014 	ori	r3,r3,21952

    beq r2, r3, 1f
 40001ec:	10c00326 	beq	r2,r3,40001fc <_start+0x40>

0:
    stw zero, (r2)
 40001f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001f8:	10fffd36 	bltu	r2,r3,40001f0 <__alt_data_end+0xfc0001f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001fc:	40003740 	call	4000374 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000200:	40003f40 	call	40003f4 <alt_main>

04000204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000204:	003fff06 	br	4000204 <__alt_data_end+0xfc000204>

04000208 <rotate_leds>:
#include "system.h"

#define LEDS_MAX_ITERATION (1000)
#define SLEEP_DELAY_US (100*1000)

void rotate_leds() {
 4000208:	defff904 	addi	sp,sp,-28
 400020c:	dfc00615 	stw	ra,24(sp)
 4000210:	df000515 	stw	fp,20(sp)
 4000214:	df000504 	addi	fp,sp,20
	int loop_count = 0;
 4000218:	e03ffb15 	stw	zero,-20(fp)
	int leds_mask = 0x01;
 400021c:	00800044 	movi	r2,1
 4000220:	e0bffc15 	stw	r2,-16(fp)

	// 0/1 = left/right direction
	int led_direction = 0;
 4000224:	e03ffd15 	stw	zero,-12(fp)

	while (loop_count < LEDS_MAX_ITERATION) {
 4000228:	00002606 	br	40002c4 <rotate_leds+0xbc>
		uint32_t switches_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_0_BASE);
 400022c:	00820034 	movhi	r2,2048
 4000230:	10840004 	addi	r2,r2,4096
 4000234:	10800037 	ldwio	r2,0(r2)
 4000238:	e0bffe15 	stw	r2,-8(fp)
		uint32_t leds_value = ~leds_mask;
 400023c:	e0bffc17 	ldw	r2,-16(fp)
 4000240:	0084303a 	nor	r2,zero,r2
 4000244:	e0bfff15 	stw	r2,-4(fp)

		// only turn on leds which have their corresponding switch enabled
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_0_BASE, leds_value & switches_value);
 4000248:	e0ffff17 	ldw	r3,-4(fp)
 400024c:	e0bffe17 	ldw	r2,-8(fp)
 4000250:	1884703a 	and	r2,r3,r2
 4000254:	1007883a 	mov	r3,r2
 4000258:	00820034 	movhi	r2,2048
 400025c:	10840404 	addi	r2,r2,4112
 4000260:	10c00035 	stwio	r3,0(r2)

		usleep(SLEEP_DELAY_US);
 4000264:	010000b4 	movhi	r4,2
 4000268:	2121a804 	addi	r4,r4,-31072
 400026c:	400046c0 	call	400046c <usleep>

		if (led_direction == 0) {
 4000270:	e0bffd17 	ldw	r2,-12(fp)
 4000274:	1000091e 	bne	r2,zero,400029c <rotate_leds+0x94>
			leds_mask <<= 1;
 4000278:	e0bffc17 	ldw	r2,-16(fp)
 400027c:	1085883a 	add	r2,r2,r2
 4000280:	e0bffc15 	stw	r2,-16(fp)

			if (leds_mask == (0x01 << (LEDS_0_DATA_WIDTH - 1))) {
 4000284:	e0bffc17 	ldw	r2,-16(fp)
 4000288:	10808018 	cmpnei	r2,r2,512
 400028c:	10000d1e 	bne	r2,zero,40002c4 <rotate_leds+0xbc>
				led_direction = 1;
 4000290:	00800044 	movi	r2,1
 4000294:	e0bffd15 	stw	r2,-12(fp)
 4000298:	00000a06 	br	40002c4 <rotate_leds+0xbc>
			}
		} else {
			leds_mask >>= 1;
 400029c:	e0bffc17 	ldw	r2,-16(fp)
 40002a0:	1005d07a 	srai	r2,r2,1
 40002a4:	e0bffc15 	stw	r2,-16(fp)

			if (leds_mask == 0x01) {
 40002a8:	e0bffc17 	ldw	r2,-16(fp)
 40002ac:	10800058 	cmpnei	r2,r2,1
 40002b0:	1000041e 	bne	r2,zero,40002c4 <rotate_leds+0xbc>
				led_direction = 0;
 40002b4:	e03ffd15 	stw	zero,-12(fp)
				loop_count++;
 40002b8:	e0bffb17 	ldw	r2,-20(fp)
 40002bc:	10800044 	addi	r2,r2,1
 40002c0:	e0bffb15 	stw	r2,-20(fp)
	int leds_mask = 0x01;

	// 0/1 = left/right direction
	int led_direction = 0;

	while (loop_count < LEDS_MAX_ITERATION) {
 40002c4:	e0bffb17 	ldw	r2,-20(fp)
 40002c8:	1080fa10 	cmplti	r2,r2,1000
 40002cc:	103fd71e 	bne	r2,zero,400022c <__alt_data_end+0xfc00022c>
				led_direction = 0;
				loop_count++;
			}
		}
	}
}
 40002d0:	e037883a 	mov	sp,fp
 40002d4:	dfc00117 	ldw	ra,4(sp)
 40002d8:	df000017 	ldw	fp,0(sp)
 40002dc:	dec00204 	addi	sp,sp,8
 40002e0:	f800283a 	ret

040002e4 <main>:

int main() {
 40002e4:	defffe04 	addi	sp,sp,-8
 40002e8:	dfc00115 	stw	ra,4(sp)
 40002ec:	df000015 	stw	fp,0(sp)
 40002f0:	d839883a 	mov	fp,sp
	rotate_leds();
 40002f4:	40002080 	call	4000208 <rotate_leds>
	return 0;
 40002f8:	0005883a 	mov	r2,zero
}
 40002fc:	e037883a 	mov	sp,fp
 4000300:	dfc00117 	ldw	ra,4(sp)
 4000304:	df000017 	ldw	fp,0(sp)
 4000308:	dec00204 	addi	sp,sp,8
 400030c:	f800283a 	ret

04000310 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4000310:	defffc04 	addi	sp,sp,-16
 4000314:	df000315 	stw	fp,12(sp)
 4000318:	df000304 	addi	fp,sp,12
 400031c:	e13ffd15 	stw	r4,-12(fp)
 4000320:	e17ffe15 	stw	r5,-8(fp)
 4000324:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4000328:	e0fffe17 	ldw	r3,-8(fp)
 400032c:	e0bffd17 	ldw	r2,-12(fp)
 4000330:	18800c26 	beq	r3,r2,4000364 <alt_load_section+0x54>
  {
    while( to != end )
 4000334:	00000806 	br	4000358 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4000338:	e0bffe17 	ldw	r2,-8(fp)
 400033c:	10c00104 	addi	r3,r2,4
 4000340:	e0fffe15 	stw	r3,-8(fp)
 4000344:	e0fffd17 	ldw	r3,-12(fp)
 4000348:	19000104 	addi	r4,r3,4
 400034c:	e13ffd15 	stw	r4,-12(fp)
 4000350:	18c00017 	ldw	r3,0(r3)
 4000354:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4000358:	e0fffe17 	ldw	r3,-8(fp)
 400035c:	e0bfff17 	ldw	r2,-4(fp)
 4000360:	18bff51e 	bne	r3,r2,4000338 <__alt_data_end+0xfc000338>
    {
      *to++ = *from++;
    }
  }
}
 4000364:	e037883a 	mov	sp,fp
 4000368:	df000017 	ldw	fp,0(sp)
 400036c:	dec00104 	addi	sp,sp,4
 4000370:	f800283a 	ret

04000374 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4000374:	defffe04 	addi	sp,sp,-8
 4000378:	dfc00115 	stw	ra,4(sp)
 400037c:	df000015 	stw	fp,0(sp)
 4000380:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4000384:	01010034 	movhi	r4,1024
 4000388:	210f9304 	addi	r4,r4,15948
 400038c:	01410034 	movhi	r5,1024
 4000390:	2949fd04 	addi	r5,r5,10228
 4000394:	01810034 	movhi	r6,1024
 4000398:	318f9304 	addi	r6,r6,15948
 400039c:	40003100 	call	4000310 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40003a0:	01010034 	movhi	r4,1024
 40003a4:	21000804 	addi	r4,r4,32
 40003a8:	01410034 	movhi	r5,1024
 40003ac:	29400804 	addi	r5,r5,32
 40003b0:	01810034 	movhi	r6,1024
 40003b4:	31806f04 	addi	r6,r6,444
 40003b8:	40003100 	call	4000310 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40003bc:	01010034 	movhi	r4,1024
 40003c0:	2109ef04 	addi	r4,r4,10172
 40003c4:	01410034 	movhi	r5,1024
 40003c8:	2949ef04 	addi	r5,r5,10172
 40003cc:	01810034 	movhi	r6,1024
 40003d0:	3189fd04 	addi	r6,r6,10228
 40003d4:	40003100 	call	4000310 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40003d8:	40013540 	call	4001354 <alt_dcache_flush_all>
  alt_icache_flush_all();
 40003dc:	40015700 	call	4001570 <alt_icache_flush_all>
}
 40003e0:	e037883a 	mov	sp,fp
 40003e4:	dfc00117 	ldw	ra,4(sp)
 40003e8:	df000017 	ldw	fp,0(sp)
 40003ec:	dec00204 	addi	sp,sp,8
 40003f0:	f800283a 	ret

040003f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40003f4:	defffd04 	addi	sp,sp,-12
 40003f8:	dfc00215 	stw	ra,8(sp)
 40003fc:	df000115 	stw	fp,4(sp)
 4000400:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000404:	0009883a 	mov	r4,zero
 4000408:	40004d40 	call	40004d4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400040c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4000410:	40005080 	call	4000508 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4000414:	01010034 	movhi	r4,1024
 4000418:	2109ef04 	addi	r4,r4,10172
 400041c:	01410034 	movhi	r5,1024
 4000420:	2949ef04 	addi	r5,r5,10172
 4000424:	01810034 	movhi	r6,1024
 4000428:	3189ef04 	addi	r6,r6,10172
 400042c:	40019300 	call	4001930 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4000430:	40014b80 	call	40014b8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4000434:	01010034 	movhi	r4,1024
 4000438:	21054504 	addi	r4,r4,5396
 400043c:	400211c0 	call	400211c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4000440:	d125a117 	ldw	r4,-27004(gp)
 4000444:	d0e5a217 	ldw	r3,-27000(gp)
 4000448:	d0a5a317 	ldw	r2,-26996(gp)
 400044c:	180b883a 	mov	r5,r3
 4000450:	100d883a 	mov	r6,r2
 4000454:	40002e40 	call	40002e4 <main>
 4000458:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400045c:	01000044 	movi	r4,1
 4000460:	40012840 	call	4001284 <close>
  exit (result);
 4000464:	e13fff17 	ldw	r4,-4(fp)
 4000468:	40021300 	call	4002130 <exit>

0400046c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 400046c:	defffd04 	addi	sp,sp,-12
 4000470:	dfc00215 	stw	ra,8(sp)
 4000474:	df000115 	stw	fp,4(sp)
 4000478:	df000104 	addi	fp,sp,4
 400047c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4000480:	e13fff17 	ldw	r4,-4(fp)
 4000484:	40010dc0 	call	40010dc <alt_busy_sleep>
}
 4000488:	e037883a 	mov	sp,fp
 400048c:	dfc00117 	ldw	ra,4(sp)
 4000490:	df000017 	ldw	fp,0(sp)
 4000494:	dec00204 	addi	sp,sp,8
 4000498:	f800283a 	ret

0400049c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400049c:	defffd04 	addi	sp,sp,-12
 40004a0:	dfc00215 	stw	ra,8(sp)
 40004a4:	df000115 	stw	fp,4(sp)
 40004a8:	df000104 	addi	fp,sp,4
 40004ac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 40004b0:	e13fff17 	ldw	r4,-4(fp)
 40004b4:	01410034 	movhi	r5,1024
 40004b8:	294f8a04 	addi	r5,r5,15912
 40004bc:	40014140 	call	4001414 <alt_dev_llist_insert>
}
 40004c0:	e037883a 	mov	sp,fp
 40004c4:	dfc00117 	ldw	ra,4(sp)
 40004c8:	df000017 	ldw	fp,0(sp)
 40004cc:	dec00204 	addi	sp,sp,8
 40004d0:	f800283a 	ret

040004d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40004d4:	defffd04 	addi	sp,sp,-12
 40004d8:	dfc00215 	stw	ra,8(sp)
 40004dc:	df000115 	stw	fp,4(sp)
 40004e0:	df000104 	addi	fp,sp,4
 40004e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 40004e8:	4001e180 	call	4001e18 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40004ec:	00800044 	movi	r2,1
 40004f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40004f4:	e037883a 	mov	sp,fp
 40004f8:	dfc00117 	ldw	ra,4(sp)
 40004fc:	df000017 	ldw	fp,0(sp)
 4000500:	dec00204 	addi	sp,sp,8
 4000504:	f800283a 	ret

04000508 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000508:	defffe04 	addi	sp,sp,-8
 400050c:	dfc00115 	stw	ra,4(sp)
 4000510:	df000015 	stw	fp,0(sp)
 4000514:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4000518:	01010034 	movhi	r4,1024
 400051c:	210a0704 	addi	r4,r4,10268
 4000520:	000b883a 	mov	r5,zero
 4000524:	000d883a 	mov	r6,zero
 4000528:	40006b40 	call	40006b4 <altera_avalon_jtag_uart_init>
 400052c:	01010034 	movhi	r4,1024
 4000530:	2109fd04 	addi	r4,r4,10228
 4000534:	400049c0 	call	400049c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 4000538:	0001883a 	nop
}
 400053c:	e037883a 	mov	sp,fp
 4000540:	dfc00117 	ldw	ra,4(sp)
 4000544:	df000017 	ldw	fp,0(sp)
 4000548:	dec00204 	addi	sp,sp,8
 400054c:	f800283a 	ret

04000550 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4000550:	defffa04 	addi	sp,sp,-24
 4000554:	dfc00515 	stw	ra,20(sp)
 4000558:	df000415 	stw	fp,16(sp)
 400055c:	df000404 	addi	fp,sp,16
 4000560:	e13ffd15 	stw	r4,-12(fp)
 4000564:	e17ffe15 	stw	r5,-8(fp)
 4000568:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400056c:	e0bffd17 	ldw	r2,-12(fp)
 4000570:	10800017 	ldw	r2,0(r2)
 4000574:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4000578:	e0bffc17 	ldw	r2,-16(fp)
 400057c:	10c00a04 	addi	r3,r2,40
 4000580:	e0bffd17 	ldw	r2,-12(fp)
 4000584:	10800217 	ldw	r2,8(r2)
 4000588:	1809883a 	mov	r4,r3
 400058c:	e17ffe17 	ldw	r5,-8(fp)
 4000590:	e1bfff17 	ldw	r6,-4(fp)
 4000594:	100f883a 	mov	r7,r2
 4000598:	4000b780 	call	4000b78 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400059c:	e037883a 	mov	sp,fp
 40005a0:	dfc00117 	ldw	ra,4(sp)
 40005a4:	df000017 	ldw	fp,0(sp)
 40005a8:	dec00204 	addi	sp,sp,8
 40005ac:	f800283a 	ret

040005b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40005b0:	defffa04 	addi	sp,sp,-24
 40005b4:	dfc00515 	stw	ra,20(sp)
 40005b8:	df000415 	stw	fp,16(sp)
 40005bc:	df000404 	addi	fp,sp,16
 40005c0:	e13ffd15 	stw	r4,-12(fp)
 40005c4:	e17ffe15 	stw	r5,-8(fp)
 40005c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40005cc:	e0bffd17 	ldw	r2,-12(fp)
 40005d0:	10800017 	ldw	r2,0(r2)
 40005d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 40005d8:	e0bffc17 	ldw	r2,-16(fp)
 40005dc:	10c00a04 	addi	r3,r2,40
 40005e0:	e0bffd17 	ldw	r2,-12(fp)
 40005e4:	10800217 	ldw	r2,8(r2)
 40005e8:	1809883a 	mov	r4,r3
 40005ec:	e17ffe17 	ldw	r5,-8(fp)
 40005f0:	e1bfff17 	ldw	r6,-4(fp)
 40005f4:	100f883a 	mov	r7,r2
 40005f8:	4000d840 	call	4000d84 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40005fc:	e037883a 	mov	sp,fp
 4000600:	dfc00117 	ldw	ra,4(sp)
 4000604:	df000017 	ldw	fp,0(sp)
 4000608:	dec00204 	addi	sp,sp,8
 400060c:	f800283a 	ret

04000610 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4000610:	defffc04 	addi	sp,sp,-16
 4000614:	dfc00315 	stw	ra,12(sp)
 4000618:	df000215 	stw	fp,8(sp)
 400061c:	df000204 	addi	fp,sp,8
 4000620:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4000624:	e0bfff17 	ldw	r2,-4(fp)
 4000628:	10800017 	ldw	r2,0(r2)
 400062c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4000630:	e0bffe17 	ldw	r2,-8(fp)
 4000634:	10c00a04 	addi	r3,r2,40
 4000638:	e0bfff17 	ldw	r2,-4(fp)
 400063c:	10800217 	ldw	r2,8(r2)
 4000640:	1809883a 	mov	r4,r3
 4000644:	100b883a 	mov	r5,r2
 4000648:	4000a240 	call	4000a24 <altera_avalon_jtag_uart_close>
}
 400064c:	e037883a 	mov	sp,fp
 4000650:	dfc00117 	ldw	ra,4(sp)
 4000654:	df000017 	ldw	fp,0(sp)
 4000658:	dec00204 	addi	sp,sp,8
 400065c:	f800283a 	ret

04000660 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4000660:	defffa04 	addi	sp,sp,-24
 4000664:	dfc00515 	stw	ra,20(sp)
 4000668:	df000415 	stw	fp,16(sp)
 400066c:	df000404 	addi	fp,sp,16
 4000670:	e13ffd15 	stw	r4,-12(fp)
 4000674:	e17ffe15 	stw	r5,-8(fp)
 4000678:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400067c:	e0bffd17 	ldw	r2,-12(fp)
 4000680:	10800017 	ldw	r2,0(r2)
 4000684:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4000688:	e0bffc17 	ldw	r2,-16(fp)
 400068c:	10800a04 	addi	r2,r2,40
 4000690:	1009883a 	mov	r4,r2
 4000694:	e17ffe17 	ldw	r5,-8(fp)
 4000698:	e1bfff17 	ldw	r6,-4(fp)
 400069c:	4000a8c0 	call	4000a8c <altera_avalon_jtag_uart_ioctl>
}
 40006a0:	e037883a 	mov	sp,fp
 40006a4:	dfc00117 	ldw	ra,4(sp)
 40006a8:	df000017 	ldw	fp,0(sp)
 40006ac:	dec00204 	addi	sp,sp,8
 40006b0:	f800283a 	ret

040006b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 40006b4:	defffa04 	addi	sp,sp,-24
 40006b8:	dfc00515 	stw	ra,20(sp)
 40006bc:	df000415 	stw	fp,16(sp)
 40006c0:	df000404 	addi	fp,sp,16
 40006c4:	e13ffd15 	stw	r4,-12(fp)
 40006c8:	e17ffe15 	stw	r5,-8(fp)
 40006cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40006d0:	e0bffd17 	ldw	r2,-12(fp)
 40006d4:	00c00044 	movi	r3,1
 40006d8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 40006dc:	e0bffd17 	ldw	r2,-12(fp)
 40006e0:	10800017 	ldw	r2,0(r2)
 40006e4:	10800104 	addi	r2,r2,4
 40006e8:	1007883a 	mov	r3,r2
 40006ec:	e0bffd17 	ldw	r2,-12(fp)
 40006f0:	10800817 	ldw	r2,32(r2)
 40006f4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40006f8:	e0fffe17 	ldw	r3,-8(fp)
 40006fc:	e0bfff17 	ldw	r2,-4(fp)
 4000700:	d8000015 	stw	zero,0(sp)
 4000704:	1809883a 	mov	r4,r3
 4000708:	100b883a 	mov	r5,r2
 400070c:	01810034 	movhi	r6,1024
 4000710:	3181de04 	addi	r6,r6,1912
 4000714:	e1fffd17 	ldw	r7,-12(fp)
 4000718:	40015a00 	call	40015a0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400071c:	e0bffd17 	ldw	r2,-12(fp)
 4000720:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4000724:	e0bffd17 	ldw	r2,-12(fp)
 4000728:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400072c:	00810034 	movhi	r2,1024
 4000730:	10952d04 	addi	r2,r2,21684
 4000734:	10800017 	ldw	r2,0(r2)
 4000738:	1809883a 	mov	r4,r3
 400073c:	100b883a 	mov	r5,r2
 4000740:	01810034 	movhi	r6,1024
 4000744:	31825f04 	addi	r6,r6,2428
 4000748:	e1fffd17 	ldw	r7,-12(fp)
 400074c:	4000f9c0 	call	4000f9c <alt_alarm_start>
 4000750:	1000040e 	bge	r2,zero,4000764 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4000754:	e0fffd17 	ldw	r3,-12(fp)
 4000758:	00a00034 	movhi	r2,32768
 400075c:	10bfffc4 	addi	r2,r2,-1
 4000760:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4000764:	e037883a 	mov	sp,fp
 4000768:	dfc00117 	ldw	ra,4(sp)
 400076c:	df000017 	ldw	fp,0(sp)
 4000770:	dec00204 	addi	sp,sp,8
 4000774:	f800283a 	ret

04000778 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4000778:	defff804 	addi	sp,sp,-32
 400077c:	df000715 	stw	fp,28(sp)
 4000780:	df000704 	addi	fp,sp,28
 4000784:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4000788:	e0bfff17 	ldw	r2,-4(fp)
 400078c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4000790:	e0bffb17 	ldw	r2,-20(fp)
 4000794:	10800017 	ldw	r2,0(r2)
 4000798:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400079c:	e0bffc17 	ldw	r2,-16(fp)
 40007a0:	10800104 	addi	r2,r2,4
 40007a4:	10800037 	ldwio	r2,0(r2)
 40007a8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 40007ac:	e0bffd17 	ldw	r2,-12(fp)
 40007b0:	1080c00c 	andi	r2,r2,768
 40007b4:	1000011e 	bne	r2,zero,40007bc <altera_avalon_jtag_uart_irq+0x44>
      break;
 40007b8:	00006c06 	br	400096c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 40007bc:	e0bffd17 	ldw	r2,-12(fp)
 40007c0:	1080400c 	andi	r2,r2,256
 40007c4:	10003426 	beq	r2,zero,4000898 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 40007c8:	00800074 	movhi	r2,1
 40007cc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40007d0:	e0bffb17 	ldw	r2,-20(fp)
 40007d4:	10800a17 	ldw	r2,40(r2)
 40007d8:	10800044 	addi	r2,r2,1
 40007dc:	1081ffcc 	andi	r2,r2,2047
 40007e0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 40007e4:	e0bffb17 	ldw	r2,-20(fp)
 40007e8:	10c00b17 	ldw	r3,44(r2)
 40007ec:	e0bffe17 	ldw	r2,-8(fp)
 40007f0:	1880011e 	bne	r3,r2,40007f8 <altera_avalon_jtag_uart_irq+0x80>
          break;
 40007f4:	00001606 	br	4000850 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40007f8:	e0bffc17 	ldw	r2,-16(fp)
 40007fc:	10800037 	ldwio	r2,0(r2)
 4000800:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4000804:	e0bff917 	ldw	r2,-28(fp)
 4000808:	10a0000c 	andi	r2,r2,32768
 400080c:	1000011e 	bne	r2,zero,4000814 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 4000810:	00000f06 	br	4000850 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4000814:	e0bffb17 	ldw	r2,-20(fp)
 4000818:	10800a17 	ldw	r2,40(r2)
 400081c:	e0fff917 	ldw	r3,-28(fp)
 4000820:	1809883a 	mov	r4,r3
 4000824:	e0fffb17 	ldw	r3,-20(fp)
 4000828:	1885883a 	add	r2,r3,r2
 400082c:	10800e04 	addi	r2,r2,56
 4000830:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000834:	e0bffb17 	ldw	r2,-20(fp)
 4000838:	10800a17 	ldw	r2,40(r2)
 400083c:	10800044 	addi	r2,r2,1
 4000840:	10c1ffcc 	andi	r3,r2,2047
 4000844:	e0bffb17 	ldw	r2,-20(fp)
 4000848:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400084c:	003fe006 	br	40007d0 <__alt_data_end+0xfc0007d0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4000850:	e0bff917 	ldw	r2,-28(fp)
 4000854:	10bfffec 	andhi	r2,r2,65535
 4000858:	10000f26 	beq	r2,zero,4000898 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400085c:	e0bffb17 	ldw	r2,-20(fp)
 4000860:	10c00817 	ldw	r3,32(r2)
 4000864:	00bfff84 	movi	r2,-2
 4000868:	1886703a 	and	r3,r3,r2
 400086c:	e0bffb17 	ldw	r2,-20(fp)
 4000870:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4000874:	e0bffc17 	ldw	r2,-16(fp)
 4000878:	10800104 	addi	r2,r2,4
 400087c:	1007883a 	mov	r3,r2
 4000880:	e0bffb17 	ldw	r2,-20(fp)
 4000884:	10800817 	ldw	r2,32(r2)
 4000888:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400088c:	e0bffc17 	ldw	r2,-16(fp)
 4000890:	10800104 	addi	r2,r2,4
 4000894:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4000898:	e0bffd17 	ldw	r2,-12(fp)
 400089c:	1080800c 	andi	r2,r2,512
 40008a0:	10003126 	beq	r2,zero,4000968 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 40008a4:	e0bffd17 	ldw	r2,-12(fp)
 40008a8:	1004d43a 	srli	r2,r2,16
 40008ac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 40008b0:	00001406 	br	4000904 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 40008b4:	e0bffc17 	ldw	r2,-16(fp)
 40008b8:	e0fffb17 	ldw	r3,-20(fp)
 40008bc:	18c00d17 	ldw	r3,52(r3)
 40008c0:	e13ffb17 	ldw	r4,-20(fp)
 40008c4:	20c7883a 	add	r3,r4,r3
 40008c8:	18c20e04 	addi	r3,r3,2104
 40008cc:	18c00003 	ldbu	r3,0(r3)
 40008d0:	18c03fcc 	andi	r3,r3,255
 40008d4:	18c0201c 	xori	r3,r3,128
 40008d8:	18ffe004 	addi	r3,r3,-128
 40008dc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40008e0:	e0bffb17 	ldw	r2,-20(fp)
 40008e4:	10800d17 	ldw	r2,52(r2)
 40008e8:	10800044 	addi	r2,r2,1
 40008ec:	10c1ffcc 	andi	r3,r2,2047
 40008f0:	e0bffb17 	ldw	r2,-20(fp)
 40008f4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 40008f8:	e0bffa17 	ldw	r2,-24(fp)
 40008fc:	10bfffc4 	addi	r2,r2,-1
 4000900:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4000904:	e0bffa17 	ldw	r2,-24(fp)
 4000908:	10000526 	beq	r2,zero,4000920 <altera_avalon_jtag_uart_irq+0x1a8>
 400090c:	e0bffb17 	ldw	r2,-20(fp)
 4000910:	10c00d17 	ldw	r3,52(r2)
 4000914:	e0bffb17 	ldw	r2,-20(fp)
 4000918:	10800c17 	ldw	r2,48(r2)
 400091c:	18bfe51e 	bne	r3,r2,40008b4 <__alt_data_end+0xfc0008b4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4000920:	e0bffa17 	ldw	r2,-24(fp)
 4000924:	10001026 	beq	r2,zero,4000968 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4000928:	e0bffb17 	ldw	r2,-20(fp)
 400092c:	10c00817 	ldw	r3,32(r2)
 4000930:	00bfff44 	movi	r2,-3
 4000934:	1886703a 	and	r3,r3,r2
 4000938:	e0bffb17 	ldw	r2,-20(fp)
 400093c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4000940:	e0bffb17 	ldw	r2,-20(fp)
 4000944:	10800017 	ldw	r2,0(r2)
 4000948:	10800104 	addi	r2,r2,4
 400094c:	1007883a 	mov	r3,r2
 4000950:	e0bffb17 	ldw	r2,-20(fp)
 4000954:	10800817 	ldw	r2,32(r2)
 4000958:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400095c:	e0bffc17 	ldw	r2,-16(fp)
 4000960:	10800104 	addi	r2,r2,4
 4000964:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4000968:	003f8c06 	br	400079c <__alt_data_end+0xfc00079c>
}
 400096c:	e037883a 	mov	sp,fp
 4000970:	df000017 	ldw	fp,0(sp)
 4000974:	dec00104 	addi	sp,sp,4
 4000978:	f800283a 	ret

0400097c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400097c:	defff804 	addi	sp,sp,-32
 4000980:	df000715 	stw	fp,28(sp)
 4000984:	df000704 	addi	fp,sp,28
 4000988:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400098c:	e0bffb17 	ldw	r2,-20(fp)
 4000990:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4000994:	e0bff917 	ldw	r2,-28(fp)
 4000998:	10800017 	ldw	r2,0(r2)
 400099c:	10800104 	addi	r2,r2,4
 40009a0:	10800037 	ldwio	r2,0(r2)
 40009a4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 40009a8:	e0bffa17 	ldw	r2,-24(fp)
 40009ac:	1081000c 	andi	r2,r2,1024
 40009b0:	10000b26 	beq	r2,zero,40009e0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40009b4:	e0bff917 	ldw	r2,-28(fp)
 40009b8:	10800017 	ldw	r2,0(r2)
 40009bc:	10800104 	addi	r2,r2,4
 40009c0:	1007883a 	mov	r3,r2
 40009c4:	e0bff917 	ldw	r2,-28(fp)
 40009c8:	10800817 	ldw	r2,32(r2)
 40009cc:	10810014 	ori	r2,r2,1024
 40009d0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 40009d4:	e0bff917 	ldw	r2,-28(fp)
 40009d8:	10000915 	stw	zero,36(r2)
 40009dc:	00000a06 	br	4000a08 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 40009e0:	e0bff917 	ldw	r2,-28(fp)
 40009e4:	10c00917 	ldw	r3,36(r2)
 40009e8:	00a00034 	movhi	r2,32768
 40009ec:	10bfff04 	addi	r2,r2,-4
 40009f0:	10c00536 	bltu	r2,r3,4000a08 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 40009f4:	e0bff917 	ldw	r2,-28(fp)
 40009f8:	10800917 	ldw	r2,36(r2)
 40009fc:	10c00044 	addi	r3,r2,1
 4000a00:	e0bff917 	ldw	r2,-28(fp)
 4000a04:	10c00915 	stw	r3,36(r2)
 4000a08:	00810034 	movhi	r2,1024
 4000a0c:	10952d04 	addi	r2,r2,21684
 4000a10:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4000a14:	e037883a 	mov	sp,fp
 4000a18:	df000017 	ldw	fp,0(sp)
 4000a1c:	dec00104 	addi	sp,sp,4
 4000a20:	f800283a 	ret

04000a24 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4000a24:	defffd04 	addi	sp,sp,-12
 4000a28:	df000215 	stw	fp,8(sp)
 4000a2c:	df000204 	addi	fp,sp,8
 4000a30:	e13ffe15 	stw	r4,-8(fp)
 4000a34:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4000a38:	00000506 	br	4000a50 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4000a3c:	e0bfff17 	ldw	r2,-4(fp)
 4000a40:	1090000c 	andi	r2,r2,16384
 4000a44:	10000226 	beq	r2,zero,4000a50 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4000a48:	00bffd44 	movi	r2,-11
 4000a4c:	00000b06 	br	4000a7c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4000a50:	e0bffe17 	ldw	r2,-8(fp)
 4000a54:	10c00d17 	ldw	r3,52(r2)
 4000a58:	e0bffe17 	ldw	r2,-8(fp)
 4000a5c:	10800c17 	ldw	r2,48(r2)
 4000a60:	18800526 	beq	r3,r2,4000a78 <altera_avalon_jtag_uart_close+0x54>
 4000a64:	e0bffe17 	ldw	r2,-8(fp)
 4000a68:	10c00917 	ldw	r3,36(r2)
 4000a6c:	e0bffe17 	ldw	r2,-8(fp)
 4000a70:	10800117 	ldw	r2,4(r2)
 4000a74:	18bff136 	bltu	r3,r2,4000a3c <__alt_data_end+0xfc000a3c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4000a78:	0005883a 	mov	r2,zero
}
 4000a7c:	e037883a 	mov	sp,fp
 4000a80:	df000017 	ldw	fp,0(sp)
 4000a84:	dec00104 	addi	sp,sp,4
 4000a88:	f800283a 	ret

04000a8c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4000a8c:	defffa04 	addi	sp,sp,-24
 4000a90:	df000515 	stw	fp,20(sp)
 4000a94:	df000504 	addi	fp,sp,20
 4000a98:	e13ffd15 	stw	r4,-12(fp)
 4000a9c:	e17ffe15 	stw	r5,-8(fp)
 4000aa0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4000aa4:	00bff9c4 	movi	r2,-25
 4000aa8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4000aac:	e0bffe17 	ldw	r2,-8(fp)
 4000ab0:	10da8060 	cmpeqi	r3,r2,27137
 4000ab4:	1800031e 	bne	r3,zero,4000ac4 <altera_avalon_jtag_uart_ioctl+0x38>
 4000ab8:	109a80a0 	cmpeqi	r2,r2,27138
 4000abc:	1000191e 	bne	r2,zero,4000b24 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 4000ac0:	00002806 	br	4000b64 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4000ac4:	e0bffd17 	ldw	r2,-12(fp)
 4000ac8:	10c00117 	ldw	r3,4(r2)
 4000acc:	00a00034 	movhi	r2,32768
 4000ad0:	10bfffc4 	addi	r2,r2,-1
 4000ad4:	18801226 	beq	r3,r2,4000b20 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 4000ad8:	e0bfff17 	ldw	r2,-4(fp)
 4000adc:	10800017 	ldw	r2,0(r2)
 4000ae0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4000ae4:	e0bffc17 	ldw	r2,-16(fp)
 4000ae8:	10800090 	cmplti	r2,r2,2
 4000aec:	1000061e 	bne	r2,zero,4000b08 <altera_avalon_jtag_uart_ioctl+0x7c>
 4000af0:	e0fffc17 	ldw	r3,-16(fp)
 4000af4:	00a00034 	movhi	r2,32768
 4000af8:	10bfffc4 	addi	r2,r2,-1
 4000afc:	18800226 	beq	r3,r2,4000b08 <altera_avalon_jtag_uart_ioctl+0x7c>
 4000b00:	e0bffc17 	ldw	r2,-16(fp)
 4000b04:	00000206 	br	4000b10 <altera_avalon_jtag_uart_ioctl+0x84>
 4000b08:	00a00034 	movhi	r2,32768
 4000b0c:	10bfff84 	addi	r2,r2,-2
 4000b10:	e0fffd17 	ldw	r3,-12(fp)
 4000b14:	18800115 	stw	r2,4(r3)
      rc = 0;
 4000b18:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4000b1c:	00001106 	br	4000b64 <altera_avalon_jtag_uart_ioctl+0xd8>
 4000b20:	00001006 	br	4000b64 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4000b24:	e0bffd17 	ldw	r2,-12(fp)
 4000b28:	10c00117 	ldw	r3,4(r2)
 4000b2c:	00a00034 	movhi	r2,32768
 4000b30:	10bfffc4 	addi	r2,r2,-1
 4000b34:	18800a26 	beq	r3,r2,4000b60 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4000b38:	e0bffd17 	ldw	r2,-12(fp)
 4000b3c:	10c00917 	ldw	r3,36(r2)
 4000b40:	e0bffd17 	ldw	r2,-12(fp)
 4000b44:	10800117 	ldw	r2,4(r2)
 4000b48:	1885803a 	cmpltu	r2,r3,r2
 4000b4c:	10c03fcc 	andi	r3,r2,255
 4000b50:	e0bfff17 	ldw	r2,-4(fp)
 4000b54:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4000b58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4000b5c:	00000006 	br	4000b60 <altera_avalon_jtag_uart_ioctl+0xd4>
 4000b60:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4000b64:	e0bffb17 	ldw	r2,-20(fp)
}
 4000b68:	e037883a 	mov	sp,fp
 4000b6c:	df000017 	ldw	fp,0(sp)
 4000b70:	dec00104 	addi	sp,sp,4
 4000b74:	f800283a 	ret

04000b78 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4000b78:	defff304 	addi	sp,sp,-52
 4000b7c:	dfc00c15 	stw	ra,48(sp)
 4000b80:	df000b15 	stw	fp,44(sp)
 4000b84:	df000b04 	addi	fp,sp,44
 4000b88:	e13ffc15 	stw	r4,-16(fp)
 4000b8c:	e17ffd15 	stw	r5,-12(fp)
 4000b90:	e1bffe15 	stw	r6,-8(fp)
 4000b94:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4000b98:	e0bffd17 	ldw	r2,-12(fp)
 4000b9c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4000ba0:	00004906 	br	4000cc8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4000ba4:	e0bffc17 	ldw	r2,-16(fp)
 4000ba8:	10800a17 	ldw	r2,40(r2)
 4000bac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4000bb0:	e0bffc17 	ldw	r2,-16(fp)
 4000bb4:	10800b17 	ldw	r2,44(r2)
 4000bb8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4000bbc:	e0fff717 	ldw	r3,-36(fp)
 4000bc0:	e0bff817 	ldw	r2,-32(fp)
 4000bc4:	18800536 	bltu	r3,r2,4000bdc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4000bc8:	e0fff717 	ldw	r3,-36(fp)
 4000bcc:	e0bff817 	ldw	r2,-32(fp)
 4000bd0:	1885c83a 	sub	r2,r3,r2
 4000bd4:	e0bff615 	stw	r2,-40(fp)
 4000bd8:	00000406 	br	4000bec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4000bdc:	00c20004 	movi	r3,2048
 4000be0:	e0bff817 	ldw	r2,-32(fp)
 4000be4:	1885c83a 	sub	r2,r3,r2
 4000be8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4000bec:	e0bff617 	ldw	r2,-40(fp)
 4000bf0:	1000011e 	bne	r2,zero,4000bf8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 4000bf4:	00001d06 	br	4000c6c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 4000bf8:	e0fffe17 	ldw	r3,-8(fp)
 4000bfc:	e0bff617 	ldw	r2,-40(fp)
 4000c00:	1880022e 	bgeu	r3,r2,4000c0c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 4000c04:	e0bffe17 	ldw	r2,-8(fp)
 4000c08:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4000c0c:	e0bff817 	ldw	r2,-32(fp)
 4000c10:	10800e04 	addi	r2,r2,56
 4000c14:	e0fffc17 	ldw	r3,-16(fp)
 4000c18:	1885883a 	add	r2,r3,r2
 4000c1c:	e13ff517 	ldw	r4,-44(fp)
 4000c20:	100b883a 	mov	r5,r2
 4000c24:	e1bff617 	ldw	r6,-40(fp)
 4000c28:	40021e40 	call	40021e4 <memcpy>
      ptr   += n;
 4000c2c:	e0fff517 	ldw	r3,-44(fp)
 4000c30:	e0bff617 	ldw	r2,-40(fp)
 4000c34:	1885883a 	add	r2,r3,r2
 4000c38:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4000c3c:	e0fffe17 	ldw	r3,-8(fp)
 4000c40:	e0bff617 	ldw	r2,-40(fp)
 4000c44:	1885c83a 	sub	r2,r3,r2
 4000c48:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000c4c:	e0fff817 	ldw	r3,-32(fp)
 4000c50:	e0bff617 	ldw	r2,-40(fp)
 4000c54:	1885883a 	add	r2,r3,r2
 4000c58:	10c1ffcc 	andi	r3,r2,2047
 4000c5c:	e0bffc17 	ldw	r2,-16(fp)
 4000c60:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4000c64:	e0bffe17 	ldw	r2,-8(fp)
 4000c68:	00bfce16 	blt	zero,r2,4000ba4 <__alt_data_end+0xfc000ba4>

    /* If we read any data then return it */
    if (ptr != buffer)
 4000c6c:	e0fff517 	ldw	r3,-44(fp)
 4000c70:	e0bffd17 	ldw	r2,-12(fp)
 4000c74:	18800126 	beq	r3,r2,4000c7c <altera_avalon_jtag_uart_read+0x104>
      break;
 4000c78:	00001506 	br	4000cd0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4000c7c:	e0bfff17 	ldw	r2,-4(fp)
 4000c80:	1090000c 	andi	r2,r2,16384
 4000c84:	10000126 	beq	r2,zero,4000c8c <altera_avalon_jtag_uart_read+0x114>
      break;
 4000c88:	00001106 	br	4000cd0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4000c8c:	0001883a 	nop
 4000c90:	e0bffc17 	ldw	r2,-16(fp)
 4000c94:	10c00a17 	ldw	r3,40(r2)
 4000c98:	e0bff717 	ldw	r2,-36(fp)
 4000c9c:	1880051e 	bne	r3,r2,4000cb4 <altera_avalon_jtag_uart_read+0x13c>
 4000ca0:	e0bffc17 	ldw	r2,-16(fp)
 4000ca4:	10c00917 	ldw	r3,36(r2)
 4000ca8:	e0bffc17 	ldw	r2,-16(fp)
 4000cac:	10800117 	ldw	r2,4(r2)
 4000cb0:	18bff736 	bltu	r3,r2,4000c90 <__alt_data_end+0xfc000c90>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4000cb4:	e0bffc17 	ldw	r2,-16(fp)
 4000cb8:	10c00a17 	ldw	r3,40(r2)
 4000cbc:	e0bff717 	ldw	r2,-36(fp)
 4000cc0:	1880011e 	bne	r3,r2,4000cc8 <altera_avalon_jtag_uart_read+0x150>
      break;
 4000cc4:	00000206 	br	4000cd0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4000cc8:	e0bffe17 	ldw	r2,-8(fp)
 4000ccc:	00bfb516 	blt	zero,r2,4000ba4 <__alt_data_end+0xfc000ba4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4000cd0:	e0fff517 	ldw	r3,-44(fp)
 4000cd4:	e0bffd17 	ldw	r2,-12(fp)
 4000cd8:	18801826 	beq	r3,r2,4000d3c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000cdc:	0005303a 	rdctl	r2,status
 4000ce0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000ce4:	e0fffa17 	ldw	r3,-24(fp)
 4000ce8:	00bfff84 	movi	r2,-2
 4000cec:	1884703a 	and	r2,r3,r2
 4000cf0:	1001703a 	wrctl	status,r2
  
  return context;
 4000cf4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4000cf8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4000cfc:	e0bffc17 	ldw	r2,-16(fp)
 4000d00:	10800817 	ldw	r2,32(r2)
 4000d04:	10c00054 	ori	r3,r2,1
 4000d08:	e0bffc17 	ldw	r2,-16(fp)
 4000d0c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4000d10:	e0bffc17 	ldw	r2,-16(fp)
 4000d14:	10800017 	ldw	r2,0(r2)
 4000d18:	10800104 	addi	r2,r2,4
 4000d1c:	1007883a 	mov	r3,r2
 4000d20:	e0bffc17 	ldw	r2,-16(fp)
 4000d24:	10800817 	ldw	r2,32(r2)
 4000d28:	18800035 	stwio	r2,0(r3)
 4000d2c:	e0bff917 	ldw	r2,-28(fp)
 4000d30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000d34:	e0bffb17 	ldw	r2,-20(fp)
 4000d38:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4000d3c:	e0fff517 	ldw	r3,-44(fp)
 4000d40:	e0bffd17 	ldw	r2,-12(fp)
 4000d44:	18800426 	beq	r3,r2,4000d58 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 4000d48:	e0fff517 	ldw	r3,-44(fp)
 4000d4c:	e0bffd17 	ldw	r2,-12(fp)
 4000d50:	1885c83a 	sub	r2,r3,r2
 4000d54:	00000606 	br	4000d70 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 4000d58:	e0bfff17 	ldw	r2,-4(fp)
 4000d5c:	1090000c 	andi	r2,r2,16384
 4000d60:	10000226 	beq	r2,zero,4000d6c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 4000d64:	00bffd44 	movi	r2,-11
 4000d68:	00000106 	br	4000d70 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 4000d6c:	00bffec4 	movi	r2,-5
}
 4000d70:	e037883a 	mov	sp,fp
 4000d74:	dfc00117 	ldw	ra,4(sp)
 4000d78:	df000017 	ldw	fp,0(sp)
 4000d7c:	dec00204 	addi	sp,sp,8
 4000d80:	f800283a 	ret

04000d84 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4000d84:	defff304 	addi	sp,sp,-52
 4000d88:	dfc00c15 	stw	ra,48(sp)
 4000d8c:	df000b15 	stw	fp,44(sp)
 4000d90:	df000b04 	addi	fp,sp,44
 4000d94:	e13ffc15 	stw	r4,-16(fp)
 4000d98:	e17ffd15 	stw	r5,-12(fp)
 4000d9c:	e1bffe15 	stw	r6,-8(fp)
 4000da0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4000da4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4000da8:	e0bffd17 	ldw	r2,-12(fp)
 4000dac:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4000db0:	00003806 	br	4000e94 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4000db4:	e0bffc17 	ldw	r2,-16(fp)
 4000db8:	10800c17 	ldw	r2,48(r2)
 4000dbc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 4000dc0:	e0bffc17 	ldw	r2,-16(fp)
 4000dc4:	10800d17 	ldw	r2,52(r2)
 4000dc8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4000dcc:	e0fff817 	ldw	r3,-32(fp)
 4000dd0:	e0bff517 	ldw	r2,-44(fp)
 4000dd4:	1880062e 	bgeu	r3,r2,4000df0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4000dd8:	e0fff517 	ldw	r3,-44(fp)
 4000ddc:	e0bff817 	ldw	r2,-32(fp)
 4000de0:	1885c83a 	sub	r2,r3,r2
 4000de4:	10bfffc4 	addi	r2,r2,-1
 4000de8:	e0bff615 	stw	r2,-40(fp)
 4000dec:	00000b06 	br	4000e1c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4000df0:	e0bff517 	ldw	r2,-44(fp)
 4000df4:	10000526 	beq	r2,zero,4000e0c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4000df8:	00c20004 	movi	r3,2048
 4000dfc:	e0bff817 	ldw	r2,-32(fp)
 4000e00:	1885c83a 	sub	r2,r3,r2
 4000e04:	e0bff615 	stw	r2,-40(fp)
 4000e08:	00000406 	br	4000e1c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4000e0c:	00c1ffc4 	movi	r3,2047
 4000e10:	e0bff817 	ldw	r2,-32(fp)
 4000e14:	1885c83a 	sub	r2,r3,r2
 4000e18:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4000e1c:	e0bff617 	ldw	r2,-40(fp)
 4000e20:	1000011e 	bne	r2,zero,4000e28 <altera_avalon_jtag_uart_write+0xa4>
        break;
 4000e24:	00001d06 	br	4000e9c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 4000e28:	e0fffe17 	ldw	r3,-8(fp)
 4000e2c:	e0bff617 	ldw	r2,-40(fp)
 4000e30:	1880022e 	bgeu	r3,r2,4000e3c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 4000e34:	e0bffe17 	ldw	r2,-8(fp)
 4000e38:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4000e3c:	e0bff817 	ldw	r2,-32(fp)
 4000e40:	10820e04 	addi	r2,r2,2104
 4000e44:	e0fffc17 	ldw	r3,-16(fp)
 4000e48:	1885883a 	add	r2,r3,r2
 4000e4c:	1009883a 	mov	r4,r2
 4000e50:	e17ffd17 	ldw	r5,-12(fp)
 4000e54:	e1bff617 	ldw	r6,-40(fp)
 4000e58:	40021e40 	call	40021e4 <memcpy>
      ptr   += n;
 4000e5c:	e0fffd17 	ldw	r3,-12(fp)
 4000e60:	e0bff617 	ldw	r2,-40(fp)
 4000e64:	1885883a 	add	r2,r3,r2
 4000e68:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4000e6c:	e0fffe17 	ldw	r3,-8(fp)
 4000e70:	e0bff617 	ldw	r2,-40(fp)
 4000e74:	1885c83a 	sub	r2,r3,r2
 4000e78:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000e7c:	e0fff817 	ldw	r3,-32(fp)
 4000e80:	e0bff617 	ldw	r2,-40(fp)
 4000e84:	1885883a 	add	r2,r3,r2
 4000e88:	10c1ffcc 	andi	r3,r2,2047
 4000e8c:	e0bffc17 	ldw	r2,-16(fp)
 4000e90:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4000e94:	e0bffe17 	ldw	r2,-8(fp)
 4000e98:	00bfc616 	blt	zero,r2,4000db4 <__alt_data_end+0xfc000db4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000e9c:	0005303a 	rdctl	r2,status
 4000ea0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000ea4:	e0fffa17 	ldw	r3,-24(fp)
 4000ea8:	00bfff84 	movi	r2,-2
 4000eac:	1884703a 	and	r2,r3,r2
 4000eb0:	1001703a 	wrctl	status,r2
  
  return context;
 4000eb4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4000eb8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4000ebc:	e0bffc17 	ldw	r2,-16(fp)
 4000ec0:	10800817 	ldw	r2,32(r2)
 4000ec4:	10c00094 	ori	r3,r2,2
 4000ec8:	e0bffc17 	ldw	r2,-16(fp)
 4000ecc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4000ed0:	e0bffc17 	ldw	r2,-16(fp)
 4000ed4:	10800017 	ldw	r2,0(r2)
 4000ed8:	10800104 	addi	r2,r2,4
 4000edc:	1007883a 	mov	r3,r2
 4000ee0:	e0bffc17 	ldw	r2,-16(fp)
 4000ee4:	10800817 	ldw	r2,32(r2)
 4000ee8:	18800035 	stwio	r2,0(r3)
 4000eec:	e0bff917 	ldw	r2,-28(fp)
 4000ef0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000ef4:	e0bffb17 	ldw	r2,-20(fp)
 4000ef8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4000efc:	e0bffe17 	ldw	r2,-8(fp)
 4000f00:	0080120e 	bge	zero,r2,4000f4c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 4000f04:	e0bfff17 	ldw	r2,-4(fp)
 4000f08:	1090000c 	andi	r2,r2,16384
 4000f0c:	10000126 	beq	r2,zero,4000f14 <altera_avalon_jtag_uart_write+0x190>
        break;
 4000f10:	00001006 	br	4000f54 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4000f14:	0001883a 	nop
 4000f18:	e0bffc17 	ldw	r2,-16(fp)
 4000f1c:	10c00d17 	ldw	r3,52(r2)
 4000f20:	e0bff517 	ldw	r2,-44(fp)
 4000f24:	1880051e 	bne	r3,r2,4000f3c <altera_avalon_jtag_uart_write+0x1b8>
 4000f28:	e0bffc17 	ldw	r2,-16(fp)
 4000f2c:	10c00917 	ldw	r3,36(r2)
 4000f30:	e0bffc17 	ldw	r2,-16(fp)
 4000f34:	10800117 	ldw	r2,4(r2)
 4000f38:	18bff736 	bltu	r3,r2,4000f18 <__alt_data_end+0xfc000f18>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4000f3c:	e0bffc17 	ldw	r2,-16(fp)
 4000f40:	10800917 	ldw	r2,36(r2)
 4000f44:	10000126 	beq	r2,zero,4000f4c <altera_avalon_jtag_uart_write+0x1c8>
         break;
 4000f48:	00000206 	br	4000f54 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 4000f4c:	e0bffe17 	ldw	r2,-8(fp)
 4000f50:	00bf9716 	blt	zero,r2,4000db0 <__alt_data_end+0xfc000db0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4000f54:	e0fffd17 	ldw	r3,-12(fp)
 4000f58:	e0bff717 	ldw	r2,-36(fp)
 4000f5c:	18800426 	beq	r3,r2,4000f70 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 4000f60:	e0fffd17 	ldw	r3,-12(fp)
 4000f64:	e0bff717 	ldw	r2,-36(fp)
 4000f68:	1885c83a 	sub	r2,r3,r2
 4000f6c:	00000606 	br	4000f88 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 4000f70:	e0bfff17 	ldw	r2,-4(fp)
 4000f74:	1090000c 	andi	r2,r2,16384
 4000f78:	10000226 	beq	r2,zero,4000f84 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 4000f7c:	00bffd44 	movi	r2,-11
 4000f80:	00000106 	br	4000f88 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4000f84:	00bffec4 	movi	r2,-5
}
 4000f88:	e037883a 	mov	sp,fp
 4000f8c:	dfc00117 	ldw	ra,4(sp)
 4000f90:	df000017 	ldw	fp,0(sp)
 4000f94:	dec00204 	addi	sp,sp,8
 4000f98:	f800283a 	ret

04000f9c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4000f9c:	defff504 	addi	sp,sp,-44
 4000fa0:	df000a15 	stw	fp,40(sp)
 4000fa4:	df000a04 	addi	fp,sp,40
 4000fa8:	e13ffc15 	stw	r4,-16(fp)
 4000fac:	e17ffd15 	stw	r5,-12(fp)
 4000fb0:	e1bffe15 	stw	r6,-8(fp)
 4000fb4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4000fb8:	e03ff615 	stw	zero,-40(fp)
 4000fbc:	00810034 	movhi	r2,1024
 4000fc0:	10952d04 	addi	r2,r2,21684
 4000fc4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 4000fc8:	10003f26 	beq	r2,zero,40010c8 <alt_alarm_start+0x12c>
  {
    if (alarm)
 4000fcc:	e0bffc17 	ldw	r2,-16(fp)
 4000fd0:	10003b26 	beq	r2,zero,40010c0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 4000fd4:	e0bffc17 	ldw	r2,-16(fp)
 4000fd8:	e0fffe17 	ldw	r3,-8(fp)
 4000fdc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4000fe0:	e0bffc17 	ldw	r2,-16(fp)
 4000fe4:	e0ffff17 	ldw	r3,-4(fp)
 4000fe8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000fec:	0005303a 	rdctl	r2,status
 4000ff0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000ff4:	e0fff817 	ldw	r3,-32(fp)
 4000ff8:	00bfff84 	movi	r2,-2
 4000ffc:	1884703a 	and	r2,r3,r2
 4001000:	1001703a 	wrctl	status,r2
  
  return context;
 4001004:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 4001008:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400100c:	00810034 	movhi	r2,1024
 4001010:	10952e04 	addi	r2,r2,21688
 4001014:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 4001018:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400101c:	e0fffd17 	ldw	r3,-12(fp)
 4001020:	e0bff617 	ldw	r2,-40(fp)
 4001024:	1885883a 	add	r2,r3,r2
 4001028:	10c00044 	addi	r3,r2,1
 400102c:	e0bffc17 	ldw	r2,-16(fp)
 4001030:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4001034:	e0bffc17 	ldw	r2,-16(fp)
 4001038:	10c00217 	ldw	r3,8(r2)
 400103c:	e0bff617 	ldw	r2,-40(fp)
 4001040:	1880042e 	bgeu	r3,r2,4001054 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 4001044:	e0bffc17 	ldw	r2,-16(fp)
 4001048:	00c00044 	movi	r3,1
 400104c:	10c00405 	stb	r3,16(r2)
 4001050:	00000206 	br	400105c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 4001054:	e0bffc17 	ldw	r2,-16(fp)
 4001058:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400105c:	e0fffc17 	ldw	r3,-16(fp)
 4001060:	00810034 	movhi	r2,1024
 4001064:	108f8f04 	addi	r2,r2,15932
 4001068:	e0bff915 	stw	r2,-28(fp)
 400106c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4001070:	e0bffa17 	ldw	r2,-24(fp)
 4001074:	e0fff917 	ldw	r3,-28(fp)
 4001078:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400107c:	e0bff917 	ldw	r2,-28(fp)
 4001080:	10c00017 	ldw	r3,0(r2)
 4001084:	e0bffa17 	ldw	r2,-24(fp)
 4001088:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400108c:	e0bff917 	ldw	r2,-28(fp)
 4001090:	10800017 	ldw	r2,0(r2)
 4001094:	e0fffa17 	ldw	r3,-24(fp)
 4001098:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400109c:	e0bff917 	ldw	r2,-28(fp)
 40010a0:	e0fffa17 	ldw	r3,-24(fp)
 40010a4:	10c00015 	stw	r3,0(r2)
 40010a8:	e0bff717 	ldw	r2,-36(fp)
 40010ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40010b0:	e0bffb17 	ldw	r2,-20(fp)
 40010b4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 40010b8:	0005883a 	mov	r2,zero
 40010bc:	00000306 	br	40010cc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 40010c0:	00bffa84 	movi	r2,-22
 40010c4:	00000106 	br	40010cc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 40010c8:	00bfde84 	movi	r2,-134
  }
}
 40010cc:	e037883a 	mov	sp,fp
 40010d0:	df000017 	ldw	fp,0(sp)
 40010d4:	dec00104 	addi	sp,sp,4
 40010d8:	f800283a 	ret

040010dc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 40010dc:	defffa04 	addi	sp,sp,-24
 40010e0:	dfc00515 	stw	ra,20(sp)
 40010e4:	df000415 	stw	fp,16(sp)
 40010e8:	df000404 	addi	fp,sp,16
 40010ec:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 40010f0:	008000c4 	movi	r2,3
 40010f4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 40010f8:	e0fffd17 	ldw	r3,-12(fp)
 40010fc:	008003f4 	movhi	r2,15
 4001100:	10909004 	addi	r2,r2,16960
 4001104:	1885383a 	mul	r2,r3,r2
 4001108:	0100bef4 	movhi	r4,763
 400110c:	213c2004 	addi	r4,r4,-3968
 4001110:	100b883a 	mov	r5,r2
 4001114:	40027780 	call	4002778 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4001118:	01200034 	movhi	r4,32768
 400111c:	213fffc4 	addi	r4,r4,-1
 4001120:	100b883a 	mov	r5,r2
 4001124:	40027780 	call	4002778 <__udivsi3>
 4001128:	e13fff17 	ldw	r4,-4(fp)
 400112c:	100b883a 	mov	r5,r2
 4001130:	40027780 	call	4002778 <__udivsi3>
 4001134:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4001138:	e0bffe17 	ldw	r2,-8(fp)
 400113c:	10002a26 	beq	r2,zero,40011e8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4001140:	e03ffc15 	stw	zero,-16(fp)
 4001144:	00001706 	br	40011a4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4001148:	00a00034 	movhi	r2,32768
 400114c:	10bfffc4 	addi	r2,r2,-1
 4001150:	10bfffc4 	addi	r2,r2,-1
 4001154:	103ffe1e 	bne	r2,zero,4001150 <__alt_data_end+0xfc001150>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4001158:	e0fffd17 	ldw	r3,-12(fp)
 400115c:	008003f4 	movhi	r2,15
 4001160:	10909004 	addi	r2,r2,16960
 4001164:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4001168:	0100bef4 	movhi	r4,763
 400116c:	213c2004 	addi	r4,r4,-3968
 4001170:	100b883a 	mov	r5,r2
 4001174:	40027780 	call	4002778 <__udivsi3>
 4001178:	01200034 	movhi	r4,32768
 400117c:	213fffc4 	addi	r4,r4,-1
 4001180:	100b883a 	mov	r5,r2
 4001184:	40027780 	call	4002778 <__udivsi3>
 4001188:	1007883a 	mov	r3,r2
 400118c:	e0bfff17 	ldw	r2,-4(fp)
 4001190:	10c5c83a 	sub	r2,r2,r3
 4001194:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4001198:	e0bffc17 	ldw	r2,-16(fp)
 400119c:	10800044 	addi	r2,r2,1
 40011a0:	e0bffc15 	stw	r2,-16(fp)
 40011a4:	e0fffc17 	ldw	r3,-16(fp)
 40011a8:	e0bffe17 	ldw	r2,-8(fp)
 40011ac:	18bfe616 	blt	r3,r2,4001148 <__alt_data_end+0xfc001148>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40011b0:	e0fffd17 	ldw	r3,-12(fp)
 40011b4:	008003f4 	movhi	r2,15
 40011b8:	10909004 	addi	r2,r2,16960
 40011bc:	1885383a 	mul	r2,r3,r2
 40011c0:	0100bef4 	movhi	r4,763
 40011c4:	213c2004 	addi	r4,r4,-3968
 40011c8:	100b883a 	mov	r5,r2
 40011cc:	40027780 	call	4002778 <__udivsi3>
 40011d0:	1007883a 	mov	r3,r2
 40011d4:	e0bfff17 	ldw	r2,-4(fp)
 40011d8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40011dc:	10bfffc4 	addi	r2,r2,-1
 40011e0:	103ffe1e 	bne	r2,zero,40011dc <__alt_data_end+0xfc0011dc>
 40011e4:	00000d06 	br	400121c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40011e8:	e0fffd17 	ldw	r3,-12(fp)
 40011ec:	008003f4 	movhi	r2,15
 40011f0:	10909004 	addi	r2,r2,16960
 40011f4:	1885383a 	mul	r2,r3,r2
 40011f8:	0100bef4 	movhi	r4,763
 40011fc:	213c2004 	addi	r4,r4,-3968
 4001200:	100b883a 	mov	r5,r2
 4001204:	40027780 	call	4002778 <__udivsi3>
 4001208:	1007883a 	mov	r3,r2
 400120c:	e0bfff17 	ldw	r2,-4(fp)
 4001210:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4001214:	10bfffc4 	addi	r2,r2,-1
 4001218:	00bffe16 	blt	zero,r2,4001214 <__alt_data_end+0xfc001214>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 400121c:	0005883a 	mov	r2,zero
}
 4001220:	e037883a 	mov	sp,fp
 4001224:	dfc00117 	ldw	ra,4(sp)
 4001228:	df000017 	ldw	fp,0(sp)
 400122c:	dec00204 	addi	sp,sp,8
 4001230:	f800283a 	ret

04001234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4001234:	defffe04 	addi	sp,sp,-8
 4001238:	dfc00115 	stw	ra,4(sp)
 400123c:	df000015 	stw	fp,0(sp)
 4001240:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4001244:	00810034 	movhi	r2,1024
 4001248:	108f8d04 	addi	r2,r2,15924
 400124c:	10800017 	ldw	r2,0(r2)
 4001250:	10000526 	beq	r2,zero,4001268 <alt_get_errno+0x34>
 4001254:	00810034 	movhi	r2,1024
 4001258:	108f8d04 	addi	r2,r2,15924
 400125c:	10800017 	ldw	r2,0(r2)
 4001260:	103ee83a 	callr	r2
 4001264:	00000206 	br	4001270 <alt_get_errno+0x3c>
 4001268:	00810034 	movhi	r2,1024
 400126c:	10952f04 	addi	r2,r2,21692
}
 4001270:	e037883a 	mov	sp,fp
 4001274:	dfc00117 	ldw	ra,4(sp)
 4001278:	df000017 	ldw	fp,0(sp)
 400127c:	dec00204 	addi	sp,sp,8
 4001280:	f800283a 	ret

04001284 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4001284:	defffb04 	addi	sp,sp,-20
 4001288:	dfc00415 	stw	ra,16(sp)
 400128c:	df000315 	stw	fp,12(sp)
 4001290:	df000304 	addi	fp,sp,12
 4001294:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4001298:	e0bfff17 	ldw	r2,-4(fp)
 400129c:	10000616 	blt	r2,zero,40012b8 <close+0x34>
 40012a0:	e0bfff17 	ldw	r2,-4(fp)
 40012a4:	10c00324 	muli	r3,r2,12
 40012a8:	00810034 	movhi	r2,1024
 40012ac:	108e1f04 	addi	r2,r2,14460
 40012b0:	1885883a 	add	r2,r3,r2
 40012b4:	00000106 	br	40012bc <close+0x38>
 40012b8:	0005883a 	mov	r2,zero
 40012bc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 40012c0:	e0bffd17 	ldw	r2,-12(fp)
 40012c4:	10001926 	beq	r2,zero,400132c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 40012c8:	e0bffd17 	ldw	r2,-12(fp)
 40012cc:	10800017 	ldw	r2,0(r2)
 40012d0:	10800417 	ldw	r2,16(r2)
 40012d4:	10000626 	beq	r2,zero,40012f0 <close+0x6c>
 40012d8:	e0bffd17 	ldw	r2,-12(fp)
 40012dc:	10800017 	ldw	r2,0(r2)
 40012e0:	10800417 	ldw	r2,16(r2)
 40012e4:	e13ffd17 	ldw	r4,-12(fp)
 40012e8:	103ee83a 	callr	r2
 40012ec:	00000106 	br	40012f4 <close+0x70>
 40012f0:	0005883a 	mov	r2,zero
 40012f4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 40012f8:	e13fff17 	ldw	r4,-4(fp)
 40012fc:	4001c1c0 	call	4001c1c <alt_release_fd>
    if (rval < 0)
 4001300:	e0bffe17 	ldw	r2,-8(fp)
 4001304:	1000070e 	bge	r2,zero,4001324 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4001308:	40012340 	call	4001234 <alt_get_errno>
 400130c:	1007883a 	mov	r3,r2
 4001310:	e0bffe17 	ldw	r2,-8(fp)
 4001314:	0085c83a 	sub	r2,zero,r2
 4001318:	18800015 	stw	r2,0(r3)
      return -1;
 400131c:	00bfffc4 	movi	r2,-1
 4001320:	00000706 	br	4001340 <close+0xbc>
    }
    return 0;
 4001324:	0005883a 	mov	r2,zero
 4001328:	00000506 	br	4001340 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400132c:	40012340 	call	4001234 <alt_get_errno>
 4001330:	1007883a 	mov	r3,r2
 4001334:	00801444 	movi	r2,81
 4001338:	18800015 	stw	r2,0(r3)
    return -1;
 400133c:	00bfffc4 	movi	r2,-1
  }
}
 4001340:	e037883a 	mov	sp,fp
 4001344:	dfc00117 	ldw	ra,4(sp)
 4001348:	df000017 	ldw	fp,0(sp)
 400134c:	dec00204 	addi	sp,sp,8
 4001350:	f800283a 	ret

04001354 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4001354:	defffe04 	addi	sp,sp,-8
 4001358:	df000115 	stw	fp,4(sp)
 400135c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4001360:	e03fff15 	stw	zero,-4(fp)
 4001364:	00000506 	br	400137c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4001368:	e0bfff17 	ldw	r2,-4(fp)
 400136c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4001370:	e0bfff17 	ldw	r2,-4(fp)
 4001374:	10800804 	addi	r2,r2,32
 4001378:	e0bfff15 	stw	r2,-4(fp)
 400137c:	e0bfff17 	ldw	r2,-4(fp)
 4001380:	10820030 	cmpltui	r2,r2,2048
 4001384:	103ff81e 	bne	r2,zero,4001368 <__alt_data_end+0xfc001368>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4001388:	e037883a 	mov	sp,fp
 400138c:	df000017 	ldw	fp,0(sp)
 4001390:	dec00104 	addi	sp,sp,4
 4001394:	f800283a 	ret

04001398 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4001398:	defffc04 	addi	sp,sp,-16
 400139c:	df000315 	stw	fp,12(sp)
 40013a0:	df000304 	addi	fp,sp,12
 40013a4:	e13ffd15 	stw	r4,-12(fp)
 40013a8:	e17ffe15 	stw	r5,-8(fp)
 40013ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
 40013b0:	e0bfff17 	ldw	r2,-4(fp)
}
 40013b4:	e037883a 	mov	sp,fp
 40013b8:	df000017 	ldw	fp,0(sp)
 40013bc:	dec00104 	addi	sp,sp,4
 40013c0:	f800283a 	ret

040013c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40013c4:	defffe04 	addi	sp,sp,-8
 40013c8:	dfc00115 	stw	ra,4(sp)
 40013cc:	df000015 	stw	fp,0(sp)
 40013d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40013d4:	00810034 	movhi	r2,1024
 40013d8:	108f8d04 	addi	r2,r2,15924
 40013dc:	10800017 	ldw	r2,0(r2)
 40013e0:	10000526 	beq	r2,zero,40013f8 <alt_get_errno+0x34>
 40013e4:	00810034 	movhi	r2,1024
 40013e8:	108f8d04 	addi	r2,r2,15924
 40013ec:	10800017 	ldw	r2,0(r2)
 40013f0:	103ee83a 	callr	r2
 40013f4:	00000206 	br	4001400 <alt_get_errno+0x3c>
 40013f8:	00810034 	movhi	r2,1024
 40013fc:	10952f04 	addi	r2,r2,21692
}
 4001400:	e037883a 	mov	sp,fp
 4001404:	dfc00117 	ldw	ra,4(sp)
 4001408:	df000017 	ldw	fp,0(sp)
 400140c:	dec00204 	addi	sp,sp,8
 4001410:	f800283a 	ret

04001414 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4001414:	defffa04 	addi	sp,sp,-24
 4001418:	dfc00515 	stw	ra,20(sp)
 400141c:	df000415 	stw	fp,16(sp)
 4001420:	df000404 	addi	fp,sp,16
 4001424:	e13ffe15 	stw	r4,-8(fp)
 4001428:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400142c:	e0bffe17 	ldw	r2,-8(fp)
 4001430:	10000326 	beq	r2,zero,4001440 <alt_dev_llist_insert+0x2c>
 4001434:	e0bffe17 	ldw	r2,-8(fp)
 4001438:	10800217 	ldw	r2,8(r2)
 400143c:	1000061e 	bne	r2,zero,4001458 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4001440:	40013c40 	call	40013c4 <alt_get_errno>
 4001444:	1007883a 	mov	r3,r2
 4001448:	00800584 	movi	r2,22
 400144c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4001450:	00bffa84 	movi	r2,-22
 4001454:	00001306 	br	40014a4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4001458:	e0bffe17 	ldw	r2,-8(fp)
 400145c:	e0ffff17 	ldw	r3,-4(fp)
 4001460:	e0fffc15 	stw	r3,-16(fp)
 4001464:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4001468:	e0bffd17 	ldw	r2,-12(fp)
 400146c:	e0fffc17 	ldw	r3,-16(fp)
 4001470:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4001474:	e0bffc17 	ldw	r2,-16(fp)
 4001478:	10c00017 	ldw	r3,0(r2)
 400147c:	e0bffd17 	ldw	r2,-12(fp)
 4001480:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4001484:	e0bffc17 	ldw	r2,-16(fp)
 4001488:	10800017 	ldw	r2,0(r2)
 400148c:	e0fffd17 	ldw	r3,-12(fp)
 4001490:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4001494:	e0bffc17 	ldw	r2,-16(fp)
 4001498:	e0fffd17 	ldw	r3,-12(fp)
 400149c:	10c00015 	stw	r3,0(r2)

  return 0;  
 40014a0:	0005883a 	mov	r2,zero
}
 40014a4:	e037883a 	mov	sp,fp
 40014a8:	dfc00117 	ldw	ra,4(sp)
 40014ac:	df000017 	ldw	fp,0(sp)
 40014b0:	dec00204 	addi	sp,sp,8
 40014b4:	f800283a 	ret

040014b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 40014b8:	defffd04 	addi	sp,sp,-12
 40014bc:	dfc00215 	stw	ra,8(sp)
 40014c0:	df000115 	stw	fp,4(sp)
 40014c4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40014c8:	00810034 	movhi	r2,1024
 40014cc:	1089ee04 	addi	r2,r2,10168
 40014d0:	e0bfff15 	stw	r2,-4(fp)
 40014d4:	00000606 	br	40014f0 <_do_ctors+0x38>
        (*ctor) (); 
 40014d8:	e0bfff17 	ldw	r2,-4(fp)
 40014dc:	10800017 	ldw	r2,0(r2)
 40014e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40014e4:	e0bfff17 	ldw	r2,-4(fp)
 40014e8:	10bfff04 	addi	r2,r2,-4
 40014ec:	e0bfff15 	stw	r2,-4(fp)
 40014f0:	e0ffff17 	ldw	r3,-4(fp)
 40014f4:	00810034 	movhi	r2,1024
 40014f8:	1089ef04 	addi	r2,r2,10172
 40014fc:	18bff62e 	bgeu	r3,r2,40014d8 <__alt_data_end+0xfc0014d8>
        (*ctor) (); 
}
 4001500:	e037883a 	mov	sp,fp
 4001504:	dfc00117 	ldw	ra,4(sp)
 4001508:	df000017 	ldw	fp,0(sp)
 400150c:	dec00204 	addi	sp,sp,8
 4001510:	f800283a 	ret

04001514 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4001514:	defffd04 	addi	sp,sp,-12
 4001518:	dfc00215 	stw	ra,8(sp)
 400151c:	df000115 	stw	fp,4(sp)
 4001520:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4001524:	00810034 	movhi	r2,1024
 4001528:	1089ee04 	addi	r2,r2,10168
 400152c:	e0bfff15 	stw	r2,-4(fp)
 4001530:	00000606 	br	400154c <_do_dtors+0x38>
        (*dtor) (); 
 4001534:	e0bfff17 	ldw	r2,-4(fp)
 4001538:	10800017 	ldw	r2,0(r2)
 400153c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4001540:	e0bfff17 	ldw	r2,-4(fp)
 4001544:	10bfff04 	addi	r2,r2,-4
 4001548:	e0bfff15 	stw	r2,-4(fp)
 400154c:	e0ffff17 	ldw	r3,-4(fp)
 4001550:	00810034 	movhi	r2,1024
 4001554:	1089ef04 	addi	r2,r2,10172
 4001558:	18bff62e 	bgeu	r3,r2,4001534 <__alt_data_end+0xfc001534>
        (*dtor) (); 
}
 400155c:	e037883a 	mov	sp,fp
 4001560:	dfc00117 	ldw	ra,4(sp)
 4001564:	df000017 	ldw	fp,0(sp)
 4001568:	dec00204 	addi	sp,sp,8
 400156c:	f800283a 	ret

04001570 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4001570:	defffe04 	addi	sp,sp,-8
 4001574:	dfc00115 	stw	ra,4(sp)
 4001578:	df000015 	stw	fp,0(sp)
 400157c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4001580:	0009883a 	mov	r4,zero
 4001584:	01440004 	movi	r5,4096
 4001588:	40020900 	call	4002090 <alt_icache_flush>
#endif
}
 400158c:	e037883a 	mov	sp,fp
 4001590:	dfc00117 	ldw	ra,4(sp)
 4001594:	df000017 	ldw	fp,0(sp)
 4001598:	dec00204 	addi	sp,sp,8
 400159c:	f800283a 	ret

040015a0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40015a0:	defff904 	addi	sp,sp,-28
 40015a4:	dfc00615 	stw	ra,24(sp)
 40015a8:	df000515 	stw	fp,20(sp)
 40015ac:	df000504 	addi	fp,sp,20
 40015b0:	e13ffc15 	stw	r4,-16(fp)
 40015b4:	e17ffd15 	stw	r5,-12(fp)
 40015b8:	e1bffe15 	stw	r6,-8(fp)
 40015bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 40015c0:	e0800217 	ldw	r2,8(fp)
 40015c4:	d8800015 	stw	r2,0(sp)
 40015c8:	e13ffc17 	ldw	r4,-16(fp)
 40015cc:	e17ffd17 	ldw	r5,-12(fp)
 40015d0:	e1bffe17 	ldw	r6,-8(fp)
 40015d4:	e1ffff17 	ldw	r7,-4(fp)
 40015d8:	40017800 	call	4001780 <alt_iic_isr_register>
}  
 40015dc:	e037883a 	mov	sp,fp
 40015e0:	dfc00117 	ldw	ra,4(sp)
 40015e4:	df000017 	ldw	fp,0(sp)
 40015e8:	dec00204 	addi	sp,sp,8
 40015ec:	f800283a 	ret

040015f0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 40015f0:	defff904 	addi	sp,sp,-28
 40015f4:	df000615 	stw	fp,24(sp)
 40015f8:	df000604 	addi	fp,sp,24
 40015fc:	e13ffe15 	stw	r4,-8(fp)
 4001600:	e17fff15 	stw	r5,-4(fp)
 4001604:	e0bfff17 	ldw	r2,-4(fp)
 4001608:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400160c:	0005303a 	rdctl	r2,status
 4001610:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001614:	e0fffb17 	ldw	r3,-20(fp)
 4001618:	00bfff84 	movi	r2,-2
 400161c:	1884703a 	and	r2,r3,r2
 4001620:	1001703a 	wrctl	status,r2
  
  return context;
 4001624:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4001628:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 400162c:	e0bffa17 	ldw	r2,-24(fp)
 4001630:	00c00044 	movi	r3,1
 4001634:	1884983a 	sll	r2,r3,r2
 4001638:	1007883a 	mov	r3,r2
 400163c:	00810034 	movhi	r2,1024
 4001640:	10952c04 	addi	r2,r2,21680
 4001644:	10800017 	ldw	r2,0(r2)
 4001648:	1886b03a 	or	r3,r3,r2
 400164c:	00810034 	movhi	r2,1024
 4001650:	10952c04 	addi	r2,r2,21680
 4001654:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4001658:	00810034 	movhi	r2,1024
 400165c:	10952c04 	addi	r2,r2,21680
 4001660:	10800017 	ldw	r2,0(r2)
 4001664:	100170fa 	wrctl	ienable,r2
 4001668:	e0bffc17 	ldw	r2,-16(fp)
 400166c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001670:	e0bffd17 	ldw	r2,-12(fp)
 4001674:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4001678:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 400167c:	0001883a 	nop
}
 4001680:	e037883a 	mov	sp,fp
 4001684:	df000017 	ldw	fp,0(sp)
 4001688:	dec00104 	addi	sp,sp,4
 400168c:	f800283a 	ret

04001690 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4001690:	defff904 	addi	sp,sp,-28
 4001694:	df000615 	stw	fp,24(sp)
 4001698:	df000604 	addi	fp,sp,24
 400169c:	e13ffe15 	stw	r4,-8(fp)
 40016a0:	e17fff15 	stw	r5,-4(fp)
 40016a4:	e0bfff17 	ldw	r2,-4(fp)
 40016a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40016ac:	0005303a 	rdctl	r2,status
 40016b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40016b4:	e0fffb17 	ldw	r3,-20(fp)
 40016b8:	00bfff84 	movi	r2,-2
 40016bc:	1884703a 	and	r2,r3,r2
 40016c0:	1001703a 	wrctl	status,r2
  
  return context;
 40016c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40016c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 40016cc:	e0bffa17 	ldw	r2,-24(fp)
 40016d0:	00c00044 	movi	r3,1
 40016d4:	1884983a 	sll	r2,r3,r2
 40016d8:	0084303a 	nor	r2,zero,r2
 40016dc:	1007883a 	mov	r3,r2
 40016e0:	00810034 	movhi	r2,1024
 40016e4:	10952c04 	addi	r2,r2,21680
 40016e8:	10800017 	ldw	r2,0(r2)
 40016ec:	1886703a 	and	r3,r3,r2
 40016f0:	00810034 	movhi	r2,1024
 40016f4:	10952c04 	addi	r2,r2,21680
 40016f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40016fc:	00810034 	movhi	r2,1024
 4001700:	10952c04 	addi	r2,r2,21680
 4001704:	10800017 	ldw	r2,0(r2)
 4001708:	100170fa 	wrctl	ienable,r2
 400170c:	e0bffc17 	ldw	r2,-16(fp)
 4001710:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001714:	e0bffd17 	ldw	r2,-12(fp)
 4001718:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400171c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4001720:	0001883a 	nop
}
 4001724:	e037883a 	mov	sp,fp
 4001728:	df000017 	ldw	fp,0(sp)
 400172c:	dec00104 	addi	sp,sp,4
 4001730:	f800283a 	ret

04001734 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4001734:	defffc04 	addi	sp,sp,-16
 4001738:	df000315 	stw	fp,12(sp)
 400173c:	df000304 	addi	fp,sp,12
 4001740:	e13ffe15 	stw	r4,-8(fp)
 4001744:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4001748:	000530fa 	rdctl	r2,ienable
 400174c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4001750:	e0bfff17 	ldw	r2,-4(fp)
 4001754:	00c00044 	movi	r3,1
 4001758:	1884983a 	sll	r2,r3,r2
 400175c:	1007883a 	mov	r3,r2
 4001760:	e0bffd17 	ldw	r2,-12(fp)
 4001764:	1884703a 	and	r2,r3,r2
 4001768:	1004c03a 	cmpne	r2,r2,zero
 400176c:	10803fcc 	andi	r2,r2,255
}
 4001770:	e037883a 	mov	sp,fp
 4001774:	df000017 	ldw	fp,0(sp)
 4001778:	dec00104 	addi	sp,sp,4
 400177c:	f800283a 	ret

04001780 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4001780:	defff504 	addi	sp,sp,-44
 4001784:	dfc00a15 	stw	ra,40(sp)
 4001788:	df000915 	stw	fp,36(sp)
 400178c:	df000904 	addi	fp,sp,36
 4001790:	e13ffc15 	stw	r4,-16(fp)
 4001794:	e17ffd15 	stw	r5,-12(fp)
 4001798:	e1bffe15 	stw	r6,-8(fp)
 400179c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 40017a0:	00bffa84 	movi	r2,-22
 40017a4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40017a8:	e0bffd17 	ldw	r2,-12(fp)
 40017ac:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40017b0:	e0bff817 	ldw	r2,-32(fp)
 40017b4:	10800808 	cmpgei	r2,r2,32
 40017b8:	1000271e 	bne	r2,zero,4001858 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40017bc:	0005303a 	rdctl	r2,status
 40017c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40017c4:	e0fffa17 	ldw	r3,-24(fp)
 40017c8:	00bfff84 	movi	r2,-2
 40017cc:	1884703a 	and	r2,r3,r2
 40017d0:	1001703a 	wrctl	status,r2
  
  return context;
 40017d4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40017d8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 40017dc:	00810034 	movhi	r2,1024
 40017e0:	10953004 	addi	r2,r2,21696
 40017e4:	e0fff817 	ldw	r3,-32(fp)
 40017e8:	180690fa 	slli	r3,r3,3
 40017ec:	10c5883a 	add	r2,r2,r3
 40017f0:	e0fffe17 	ldw	r3,-8(fp)
 40017f4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 40017f8:	00810034 	movhi	r2,1024
 40017fc:	10953004 	addi	r2,r2,21696
 4001800:	e0fff817 	ldw	r3,-32(fp)
 4001804:	180690fa 	slli	r3,r3,3
 4001808:	18c00104 	addi	r3,r3,4
 400180c:	10c5883a 	add	r2,r2,r3
 4001810:	e0ffff17 	ldw	r3,-4(fp)
 4001814:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4001818:	e0bffe17 	ldw	r2,-8(fp)
 400181c:	10000526 	beq	r2,zero,4001834 <alt_iic_isr_register+0xb4>
 4001820:	e0bff817 	ldw	r2,-32(fp)
 4001824:	e13ffc17 	ldw	r4,-16(fp)
 4001828:	100b883a 	mov	r5,r2
 400182c:	40015f00 	call	40015f0 <alt_ic_irq_enable>
 4001830:	00000406 	br	4001844 <alt_iic_isr_register+0xc4>
 4001834:	e0bff817 	ldw	r2,-32(fp)
 4001838:	e13ffc17 	ldw	r4,-16(fp)
 400183c:	100b883a 	mov	r5,r2
 4001840:	40016900 	call	4001690 <alt_ic_irq_disable>
 4001844:	e0bff715 	stw	r2,-36(fp)
 4001848:	e0bff917 	ldw	r2,-28(fp)
 400184c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001850:	e0bffb17 	ldw	r2,-20(fp)
 4001854:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4001858:	e0bff717 	ldw	r2,-36(fp)
}
 400185c:	e037883a 	mov	sp,fp
 4001860:	dfc00117 	ldw	ra,4(sp)
 4001864:	df000017 	ldw	fp,0(sp)
 4001868:	dec00204 	addi	sp,sp,8
 400186c:	f800283a 	ret

04001870 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4001870:	defff904 	addi	sp,sp,-28
 4001874:	dfc00615 	stw	ra,24(sp)
 4001878:	df000515 	stw	fp,20(sp)
 400187c:	df000504 	addi	fp,sp,20
 4001880:	e13ffc15 	stw	r4,-16(fp)
 4001884:	e17ffd15 	stw	r5,-12(fp)
 4001888:	e1bffe15 	stw	r6,-8(fp)
 400188c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4001890:	e13ffd17 	ldw	r4,-12(fp)
 4001894:	e17ffe17 	ldw	r5,-8(fp)
 4001898:	e1bfff17 	ldw	r6,-4(fp)
 400189c:	4001ac40 	call	4001ac4 <open>
 40018a0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 40018a4:	e0bffb17 	ldw	r2,-20(fp)
 40018a8:	10001c16 	blt	r2,zero,400191c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 40018ac:	00810034 	movhi	r2,1024
 40018b0:	108e1f04 	addi	r2,r2,14460
 40018b4:	e0fffb17 	ldw	r3,-20(fp)
 40018b8:	18c00324 	muli	r3,r3,12
 40018bc:	10c5883a 	add	r2,r2,r3
 40018c0:	10c00017 	ldw	r3,0(r2)
 40018c4:	e0bffc17 	ldw	r2,-16(fp)
 40018c8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40018cc:	00810034 	movhi	r2,1024
 40018d0:	108e1f04 	addi	r2,r2,14460
 40018d4:	e0fffb17 	ldw	r3,-20(fp)
 40018d8:	18c00324 	muli	r3,r3,12
 40018dc:	18c00104 	addi	r3,r3,4
 40018e0:	10c5883a 	add	r2,r2,r3
 40018e4:	10c00017 	ldw	r3,0(r2)
 40018e8:	e0bffc17 	ldw	r2,-16(fp)
 40018ec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40018f0:	00810034 	movhi	r2,1024
 40018f4:	108e1f04 	addi	r2,r2,14460
 40018f8:	e0fffb17 	ldw	r3,-20(fp)
 40018fc:	18c00324 	muli	r3,r3,12
 4001900:	18c00204 	addi	r3,r3,8
 4001904:	10c5883a 	add	r2,r2,r3
 4001908:	10c00017 	ldw	r3,0(r2)
 400190c:	e0bffc17 	ldw	r2,-16(fp)
 4001910:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4001914:	e13ffb17 	ldw	r4,-20(fp)
 4001918:	4001c1c0 	call	4001c1c <alt_release_fd>
  }
} 
 400191c:	e037883a 	mov	sp,fp
 4001920:	dfc00117 	ldw	ra,4(sp)
 4001924:	df000017 	ldw	fp,0(sp)
 4001928:	dec00204 	addi	sp,sp,8
 400192c:	f800283a 	ret

04001930 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4001930:	defffb04 	addi	sp,sp,-20
 4001934:	dfc00415 	stw	ra,16(sp)
 4001938:	df000315 	stw	fp,12(sp)
 400193c:	df000304 	addi	fp,sp,12
 4001940:	e13ffd15 	stw	r4,-12(fp)
 4001944:	e17ffe15 	stw	r5,-8(fp)
 4001948:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400194c:	01010034 	movhi	r4,1024
 4001950:	210e2204 	addi	r4,r4,14472
 4001954:	e17ffd17 	ldw	r5,-12(fp)
 4001958:	01800044 	movi	r6,1
 400195c:	01c07fc4 	movi	r7,511
 4001960:	40018700 	call	4001870 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4001964:	01010034 	movhi	r4,1024
 4001968:	210e1f04 	addi	r4,r4,14460
 400196c:	e17ffe17 	ldw	r5,-8(fp)
 4001970:	000d883a 	mov	r6,zero
 4001974:	01c07fc4 	movi	r7,511
 4001978:	40018700 	call	4001870 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400197c:	01010034 	movhi	r4,1024
 4001980:	210e2504 	addi	r4,r4,14484
 4001984:	e17fff17 	ldw	r5,-4(fp)
 4001988:	01800044 	movi	r6,1
 400198c:	01c07fc4 	movi	r7,511
 4001990:	40018700 	call	4001870 <alt_open_fd>
}  
 4001994:	e037883a 	mov	sp,fp
 4001998:	dfc00117 	ldw	ra,4(sp)
 400199c:	df000017 	ldw	fp,0(sp)
 40019a0:	dec00204 	addi	sp,sp,8
 40019a4:	f800283a 	ret

040019a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40019a8:	defffe04 	addi	sp,sp,-8
 40019ac:	dfc00115 	stw	ra,4(sp)
 40019b0:	df000015 	stw	fp,0(sp)
 40019b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40019b8:	00810034 	movhi	r2,1024
 40019bc:	108f8d04 	addi	r2,r2,15924
 40019c0:	10800017 	ldw	r2,0(r2)
 40019c4:	10000526 	beq	r2,zero,40019dc <alt_get_errno+0x34>
 40019c8:	00810034 	movhi	r2,1024
 40019cc:	108f8d04 	addi	r2,r2,15924
 40019d0:	10800017 	ldw	r2,0(r2)
 40019d4:	103ee83a 	callr	r2
 40019d8:	00000206 	br	40019e4 <alt_get_errno+0x3c>
 40019dc:	00810034 	movhi	r2,1024
 40019e0:	10952f04 	addi	r2,r2,21692
}
 40019e4:	e037883a 	mov	sp,fp
 40019e8:	dfc00117 	ldw	ra,4(sp)
 40019ec:	df000017 	ldw	fp,0(sp)
 40019f0:	dec00204 	addi	sp,sp,8
 40019f4:	f800283a 	ret

040019f8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40019f8:	defffd04 	addi	sp,sp,-12
 40019fc:	df000215 	stw	fp,8(sp)
 4001a00:	df000204 	addi	fp,sp,8
 4001a04:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4001a08:	e0bfff17 	ldw	r2,-4(fp)
 4001a0c:	10800217 	ldw	r2,8(r2)
 4001a10:	10d00034 	orhi	r3,r2,16384
 4001a14:	e0bfff17 	ldw	r2,-4(fp)
 4001a18:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4001a1c:	e03ffe15 	stw	zero,-8(fp)
 4001a20:	00001d06 	br	4001a98 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4001a24:	00810034 	movhi	r2,1024
 4001a28:	108e1f04 	addi	r2,r2,14460
 4001a2c:	e0fffe17 	ldw	r3,-8(fp)
 4001a30:	18c00324 	muli	r3,r3,12
 4001a34:	10c5883a 	add	r2,r2,r3
 4001a38:	10c00017 	ldw	r3,0(r2)
 4001a3c:	e0bfff17 	ldw	r2,-4(fp)
 4001a40:	10800017 	ldw	r2,0(r2)
 4001a44:	1880111e 	bne	r3,r2,4001a8c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4001a48:	00810034 	movhi	r2,1024
 4001a4c:	108e1f04 	addi	r2,r2,14460
 4001a50:	e0fffe17 	ldw	r3,-8(fp)
 4001a54:	18c00324 	muli	r3,r3,12
 4001a58:	18c00204 	addi	r3,r3,8
 4001a5c:	10c5883a 	add	r2,r2,r3
 4001a60:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4001a64:	1000090e 	bge	r2,zero,4001a8c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4001a68:	e0bffe17 	ldw	r2,-8(fp)
 4001a6c:	10c00324 	muli	r3,r2,12
 4001a70:	00810034 	movhi	r2,1024
 4001a74:	108e1f04 	addi	r2,r2,14460
 4001a78:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4001a7c:	e0bfff17 	ldw	r2,-4(fp)
 4001a80:	18800226 	beq	r3,r2,4001a8c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4001a84:	00bffcc4 	movi	r2,-13
 4001a88:	00000a06 	br	4001ab4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4001a8c:	e0bffe17 	ldw	r2,-8(fp)
 4001a90:	10800044 	addi	r2,r2,1
 4001a94:	e0bffe15 	stw	r2,-8(fp)
 4001a98:	00810034 	movhi	r2,1024
 4001a9c:	108f8c04 	addi	r2,r2,15920
 4001aa0:	10800017 	ldw	r2,0(r2)
 4001aa4:	1007883a 	mov	r3,r2
 4001aa8:	e0bffe17 	ldw	r2,-8(fp)
 4001aac:	18bfdd2e 	bgeu	r3,r2,4001a24 <__alt_data_end+0xfc001a24>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4001ab0:	0005883a 	mov	r2,zero
}
 4001ab4:	e037883a 	mov	sp,fp
 4001ab8:	df000017 	ldw	fp,0(sp)
 4001abc:	dec00104 	addi	sp,sp,4
 4001ac0:	f800283a 	ret

04001ac4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4001ac4:	defff604 	addi	sp,sp,-40
 4001ac8:	dfc00915 	stw	ra,36(sp)
 4001acc:	df000815 	stw	fp,32(sp)
 4001ad0:	df000804 	addi	fp,sp,32
 4001ad4:	e13ffd15 	stw	r4,-12(fp)
 4001ad8:	e17ffe15 	stw	r5,-8(fp)
 4001adc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4001ae0:	00bfffc4 	movi	r2,-1
 4001ae4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4001ae8:	00bffb44 	movi	r2,-19
 4001aec:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4001af0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4001af4:	e13ffd17 	ldw	r4,-12(fp)
 4001af8:	01410034 	movhi	r5,1024
 4001afc:	294f8a04 	addi	r5,r5,15912
 4001b00:	4001e380 	call	4001e38 <alt_find_dev>
 4001b04:	e0bff815 	stw	r2,-32(fp)
 4001b08:	e0bff817 	ldw	r2,-32(fp)
 4001b0c:	1000051e 	bne	r2,zero,4001b24 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4001b10:	e13ffd17 	ldw	r4,-12(fp)
 4001b14:	4001ec80 	call	4001ec8 <alt_find_file>
 4001b18:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4001b1c:	00800044 	movi	r2,1
 4001b20:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4001b24:	e0bff817 	ldw	r2,-32(fp)
 4001b28:	10002926 	beq	r2,zero,4001bd0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4001b2c:	e13ff817 	ldw	r4,-32(fp)
 4001b30:	4001fdc0 	call	4001fdc <alt_get_fd>
 4001b34:	e0bff915 	stw	r2,-28(fp)
 4001b38:	e0bff917 	ldw	r2,-28(fp)
 4001b3c:	1000030e 	bge	r2,zero,4001b4c <open+0x88>
    {
      status = index;
 4001b40:	e0bff917 	ldw	r2,-28(fp)
 4001b44:	e0bffa15 	stw	r2,-24(fp)
 4001b48:	00002306 	br	4001bd8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 4001b4c:	e0bff917 	ldw	r2,-28(fp)
 4001b50:	10c00324 	muli	r3,r2,12
 4001b54:	00810034 	movhi	r2,1024
 4001b58:	108e1f04 	addi	r2,r2,14460
 4001b5c:	1885883a 	add	r2,r3,r2
 4001b60:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4001b64:	e0fffe17 	ldw	r3,-8(fp)
 4001b68:	00900034 	movhi	r2,16384
 4001b6c:	10bfffc4 	addi	r2,r2,-1
 4001b70:	1886703a 	and	r3,r3,r2
 4001b74:	e0bffc17 	ldw	r2,-16(fp)
 4001b78:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4001b7c:	e0bffb17 	ldw	r2,-20(fp)
 4001b80:	1000051e 	bne	r2,zero,4001b98 <open+0xd4>
 4001b84:	e13ffc17 	ldw	r4,-16(fp)
 4001b88:	40019f80 	call	40019f8 <alt_file_locked>
 4001b8c:	e0bffa15 	stw	r2,-24(fp)
 4001b90:	e0bffa17 	ldw	r2,-24(fp)
 4001b94:	10001016 	blt	r2,zero,4001bd8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4001b98:	e0bff817 	ldw	r2,-32(fp)
 4001b9c:	10800317 	ldw	r2,12(r2)
 4001ba0:	10000826 	beq	r2,zero,4001bc4 <open+0x100>
 4001ba4:	e0bff817 	ldw	r2,-32(fp)
 4001ba8:	10800317 	ldw	r2,12(r2)
 4001bac:	e13ffc17 	ldw	r4,-16(fp)
 4001bb0:	e17ffd17 	ldw	r5,-12(fp)
 4001bb4:	e1bffe17 	ldw	r6,-8(fp)
 4001bb8:	e1ffff17 	ldw	r7,-4(fp)
 4001bbc:	103ee83a 	callr	r2
 4001bc0:	00000106 	br	4001bc8 <open+0x104>
 4001bc4:	0005883a 	mov	r2,zero
 4001bc8:	e0bffa15 	stw	r2,-24(fp)
 4001bcc:	00000206 	br	4001bd8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4001bd0:	00bffb44 	movi	r2,-19
 4001bd4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4001bd8:	e0bffa17 	ldw	r2,-24(fp)
 4001bdc:	1000090e 	bge	r2,zero,4001c04 <open+0x140>
  {
    alt_release_fd (index);  
 4001be0:	e13ff917 	ldw	r4,-28(fp)
 4001be4:	4001c1c0 	call	4001c1c <alt_release_fd>
    ALT_ERRNO = -status;
 4001be8:	40019a80 	call	40019a8 <alt_get_errno>
 4001bec:	1007883a 	mov	r3,r2
 4001bf0:	e0bffa17 	ldw	r2,-24(fp)
 4001bf4:	0085c83a 	sub	r2,zero,r2
 4001bf8:	18800015 	stw	r2,0(r3)
    return -1;
 4001bfc:	00bfffc4 	movi	r2,-1
 4001c00:	00000106 	br	4001c08 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 4001c04:	e0bff917 	ldw	r2,-28(fp)
}
 4001c08:	e037883a 	mov	sp,fp
 4001c0c:	dfc00117 	ldw	ra,4(sp)
 4001c10:	df000017 	ldw	fp,0(sp)
 4001c14:	dec00204 	addi	sp,sp,8
 4001c18:	f800283a 	ret

04001c1c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4001c1c:	defffe04 	addi	sp,sp,-8
 4001c20:	df000115 	stw	fp,4(sp)
 4001c24:	df000104 	addi	fp,sp,4
 4001c28:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4001c2c:	e0bfff17 	ldw	r2,-4(fp)
 4001c30:	108000d0 	cmplti	r2,r2,3
 4001c34:	10000d1e 	bne	r2,zero,4001c6c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4001c38:	00810034 	movhi	r2,1024
 4001c3c:	108e1f04 	addi	r2,r2,14460
 4001c40:	e0ffff17 	ldw	r3,-4(fp)
 4001c44:	18c00324 	muli	r3,r3,12
 4001c48:	18c00204 	addi	r3,r3,8
 4001c4c:	10c5883a 	add	r2,r2,r3
 4001c50:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4001c54:	00810034 	movhi	r2,1024
 4001c58:	108e1f04 	addi	r2,r2,14460
 4001c5c:	e0ffff17 	ldw	r3,-4(fp)
 4001c60:	18c00324 	muli	r3,r3,12
 4001c64:	10c5883a 	add	r2,r2,r3
 4001c68:	10000015 	stw	zero,0(r2)
  }
}
 4001c6c:	e037883a 	mov	sp,fp
 4001c70:	df000017 	ldw	fp,0(sp)
 4001c74:	dec00104 	addi	sp,sp,4
 4001c78:	f800283a 	ret

04001c7c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4001c7c:	defffa04 	addi	sp,sp,-24
 4001c80:	df000515 	stw	fp,20(sp)
 4001c84:	df000504 	addi	fp,sp,20
 4001c88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001c8c:	0005303a 	rdctl	r2,status
 4001c90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001c94:	e0fffc17 	ldw	r3,-16(fp)
 4001c98:	00bfff84 	movi	r2,-2
 4001c9c:	1884703a 	and	r2,r3,r2
 4001ca0:	1001703a 	wrctl	status,r2
  
  return context;
 4001ca4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4001ca8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4001cac:	e0bfff17 	ldw	r2,-4(fp)
 4001cb0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4001cb4:	e0bffd17 	ldw	r2,-12(fp)
 4001cb8:	10800017 	ldw	r2,0(r2)
 4001cbc:	e0fffd17 	ldw	r3,-12(fp)
 4001cc0:	18c00117 	ldw	r3,4(r3)
 4001cc4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4001cc8:	e0bffd17 	ldw	r2,-12(fp)
 4001ccc:	10800117 	ldw	r2,4(r2)
 4001cd0:	e0fffd17 	ldw	r3,-12(fp)
 4001cd4:	18c00017 	ldw	r3,0(r3)
 4001cd8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4001cdc:	e0bffd17 	ldw	r2,-12(fp)
 4001ce0:	e0fffd17 	ldw	r3,-12(fp)
 4001ce4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4001ce8:	e0bffd17 	ldw	r2,-12(fp)
 4001cec:	e0fffd17 	ldw	r3,-12(fp)
 4001cf0:	10c00015 	stw	r3,0(r2)
 4001cf4:	e0bffb17 	ldw	r2,-20(fp)
 4001cf8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001cfc:	e0bffe17 	ldw	r2,-8(fp)
 4001d00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4001d04:	e037883a 	mov	sp,fp
 4001d08:	df000017 	ldw	fp,0(sp)
 4001d0c:	dec00104 	addi	sp,sp,4
 4001d10:	f800283a 	ret

04001d14 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4001d14:	defffb04 	addi	sp,sp,-20
 4001d18:	dfc00415 	stw	ra,16(sp)
 4001d1c:	df000315 	stw	fp,12(sp)
 4001d20:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4001d24:	d0a00717 	ldw	r2,-32740(gp)
 4001d28:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4001d2c:	d0a5a617 	ldw	r2,-26984(gp)
 4001d30:	10800044 	addi	r2,r2,1
 4001d34:	d0a5a615 	stw	r2,-26984(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4001d38:	00002e06 	br	4001df4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4001d3c:	e0bffd17 	ldw	r2,-12(fp)
 4001d40:	10800017 	ldw	r2,0(r2)
 4001d44:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4001d48:	e0bffd17 	ldw	r2,-12(fp)
 4001d4c:	10800403 	ldbu	r2,16(r2)
 4001d50:	10803fcc 	andi	r2,r2,255
 4001d54:	10000426 	beq	r2,zero,4001d68 <alt_tick+0x54>
 4001d58:	d0a5a617 	ldw	r2,-26984(gp)
 4001d5c:	1000021e 	bne	r2,zero,4001d68 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4001d60:	e0bffd17 	ldw	r2,-12(fp)
 4001d64:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4001d68:	e0bffd17 	ldw	r2,-12(fp)
 4001d6c:	10800217 	ldw	r2,8(r2)
 4001d70:	d0e5a617 	ldw	r3,-26984(gp)
 4001d74:	18801d36 	bltu	r3,r2,4001dec <alt_tick+0xd8>
 4001d78:	e0bffd17 	ldw	r2,-12(fp)
 4001d7c:	10800403 	ldbu	r2,16(r2)
 4001d80:	10803fcc 	andi	r2,r2,255
 4001d84:	1000191e 	bne	r2,zero,4001dec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4001d88:	e0bffd17 	ldw	r2,-12(fp)
 4001d8c:	10800317 	ldw	r2,12(r2)
 4001d90:	e0fffd17 	ldw	r3,-12(fp)
 4001d94:	18c00517 	ldw	r3,20(r3)
 4001d98:	1809883a 	mov	r4,r3
 4001d9c:	103ee83a 	callr	r2
 4001da0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4001da4:	e0bfff17 	ldw	r2,-4(fp)
 4001da8:	1000031e 	bne	r2,zero,4001db8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4001dac:	e13ffd17 	ldw	r4,-12(fp)
 4001db0:	4001c7c0 	call	4001c7c <alt_alarm_stop>
 4001db4:	00000d06 	br	4001dec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4001db8:	e0bffd17 	ldw	r2,-12(fp)
 4001dbc:	10c00217 	ldw	r3,8(r2)
 4001dc0:	e0bfff17 	ldw	r2,-4(fp)
 4001dc4:	1887883a 	add	r3,r3,r2
 4001dc8:	e0bffd17 	ldw	r2,-12(fp)
 4001dcc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4001dd0:	e0bffd17 	ldw	r2,-12(fp)
 4001dd4:	10c00217 	ldw	r3,8(r2)
 4001dd8:	d0a5a617 	ldw	r2,-26984(gp)
 4001ddc:	1880032e 	bgeu	r3,r2,4001dec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4001de0:	e0bffd17 	ldw	r2,-12(fp)
 4001de4:	00c00044 	movi	r3,1
 4001de8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4001dec:	e0bffe17 	ldw	r2,-8(fp)
 4001df0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4001df4:	e0fffd17 	ldw	r3,-12(fp)
 4001df8:	d0a00704 	addi	r2,gp,-32740
 4001dfc:	18bfcf1e 	bne	r3,r2,4001d3c <__alt_data_end+0xfc001d3c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4001e00:	0001883a 	nop
}
 4001e04:	e037883a 	mov	sp,fp
 4001e08:	dfc00117 	ldw	ra,4(sp)
 4001e0c:	df000017 	ldw	fp,0(sp)
 4001e10:	dec00204 	addi	sp,sp,8
 4001e14:	f800283a 	ret

04001e18 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 4001e18:	deffff04 	addi	sp,sp,-4
 4001e1c:	df000015 	stw	fp,0(sp)
 4001e20:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4001e24:	000170fa 	wrctl	ienable,zero
}
 4001e28:	e037883a 	mov	sp,fp
 4001e2c:	df000017 	ldw	fp,0(sp)
 4001e30:	dec00104 	addi	sp,sp,4
 4001e34:	f800283a 	ret

04001e38 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4001e38:	defffa04 	addi	sp,sp,-24
 4001e3c:	dfc00515 	stw	ra,20(sp)
 4001e40:	df000415 	stw	fp,16(sp)
 4001e44:	df000404 	addi	fp,sp,16
 4001e48:	e13ffe15 	stw	r4,-8(fp)
 4001e4c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4001e50:	e0bfff17 	ldw	r2,-4(fp)
 4001e54:	10800017 	ldw	r2,0(r2)
 4001e58:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4001e5c:	e13ffe17 	ldw	r4,-8(fp)
 4001e60:	400231c0 	call	400231c <strlen>
 4001e64:	10800044 	addi	r2,r2,1
 4001e68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4001e6c:	00000d06 	br	4001ea4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4001e70:	e0bffc17 	ldw	r2,-16(fp)
 4001e74:	10c00217 	ldw	r3,8(r2)
 4001e78:	e0bffd17 	ldw	r2,-12(fp)
 4001e7c:	1809883a 	mov	r4,r3
 4001e80:	e17ffe17 	ldw	r5,-8(fp)
 4001e84:	100d883a 	mov	r6,r2
 4001e88:	40021680 	call	4002168 <memcmp>
 4001e8c:	1000021e 	bne	r2,zero,4001e98 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4001e90:	e0bffc17 	ldw	r2,-16(fp)
 4001e94:	00000706 	br	4001eb4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4001e98:	e0bffc17 	ldw	r2,-16(fp)
 4001e9c:	10800017 	ldw	r2,0(r2)
 4001ea0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4001ea4:	e0fffc17 	ldw	r3,-16(fp)
 4001ea8:	e0bfff17 	ldw	r2,-4(fp)
 4001eac:	18bff01e 	bne	r3,r2,4001e70 <__alt_data_end+0xfc001e70>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4001eb0:	0005883a 	mov	r2,zero
}
 4001eb4:	e037883a 	mov	sp,fp
 4001eb8:	dfc00117 	ldw	ra,4(sp)
 4001ebc:	df000017 	ldw	fp,0(sp)
 4001ec0:	dec00204 	addi	sp,sp,8
 4001ec4:	f800283a 	ret

04001ec8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4001ec8:	defffb04 	addi	sp,sp,-20
 4001ecc:	dfc00415 	stw	ra,16(sp)
 4001ed0:	df000315 	stw	fp,12(sp)
 4001ed4:	df000304 	addi	fp,sp,12
 4001ed8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4001edc:	00810034 	movhi	r2,1024
 4001ee0:	108f8804 	addi	r2,r2,15904
 4001ee4:	10800017 	ldw	r2,0(r2)
 4001ee8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4001eec:	00003106 	br	4001fb4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 4001ef0:	e0bffd17 	ldw	r2,-12(fp)
 4001ef4:	10800217 	ldw	r2,8(r2)
 4001ef8:	1009883a 	mov	r4,r2
 4001efc:	400231c0 	call	400231c <strlen>
 4001f00:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4001f04:	e0bffd17 	ldw	r2,-12(fp)
 4001f08:	10c00217 	ldw	r3,8(r2)
 4001f0c:	e0bffe17 	ldw	r2,-8(fp)
 4001f10:	10bfffc4 	addi	r2,r2,-1
 4001f14:	1885883a 	add	r2,r3,r2
 4001f18:	10800003 	ldbu	r2,0(r2)
 4001f1c:	10803fcc 	andi	r2,r2,255
 4001f20:	1080201c 	xori	r2,r2,128
 4001f24:	10bfe004 	addi	r2,r2,-128
 4001f28:	10800bd8 	cmpnei	r2,r2,47
 4001f2c:	1000031e 	bne	r2,zero,4001f3c <alt_find_file+0x74>
    {
      len -= 1;
 4001f30:	e0bffe17 	ldw	r2,-8(fp)
 4001f34:	10bfffc4 	addi	r2,r2,-1
 4001f38:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4001f3c:	e0bffe17 	ldw	r2,-8(fp)
 4001f40:	e0ffff17 	ldw	r3,-4(fp)
 4001f44:	1885883a 	add	r2,r3,r2
 4001f48:	10800003 	ldbu	r2,0(r2)
 4001f4c:	10803fcc 	andi	r2,r2,255
 4001f50:	1080201c 	xori	r2,r2,128
 4001f54:	10bfe004 	addi	r2,r2,-128
 4001f58:	10800be0 	cmpeqi	r2,r2,47
 4001f5c:	1000081e 	bne	r2,zero,4001f80 <alt_find_file+0xb8>
 4001f60:	e0bffe17 	ldw	r2,-8(fp)
 4001f64:	e0ffff17 	ldw	r3,-4(fp)
 4001f68:	1885883a 	add	r2,r3,r2
 4001f6c:	10800003 	ldbu	r2,0(r2)
 4001f70:	10803fcc 	andi	r2,r2,255
 4001f74:	1080201c 	xori	r2,r2,128
 4001f78:	10bfe004 	addi	r2,r2,-128
 4001f7c:	10000a1e 	bne	r2,zero,4001fa8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 4001f80:	e0bffd17 	ldw	r2,-12(fp)
 4001f84:	10c00217 	ldw	r3,8(r2)
 4001f88:	e0bffe17 	ldw	r2,-8(fp)
 4001f8c:	1809883a 	mov	r4,r3
 4001f90:	e17fff17 	ldw	r5,-4(fp)
 4001f94:	100d883a 	mov	r6,r2
 4001f98:	40021680 	call	4002168 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4001f9c:	1000021e 	bne	r2,zero,4001fa8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4001fa0:	e0bffd17 	ldw	r2,-12(fp)
 4001fa4:	00000806 	br	4001fc8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 4001fa8:	e0bffd17 	ldw	r2,-12(fp)
 4001fac:	10800017 	ldw	r2,0(r2)
 4001fb0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4001fb4:	e0fffd17 	ldw	r3,-12(fp)
 4001fb8:	00810034 	movhi	r2,1024
 4001fbc:	108f8804 	addi	r2,r2,15904
 4001fc0:	18bfcb1e 	bne	r3,r2,4001ef0 <__alt_data_end+0xfc001ef0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4001fc4:	0005883a 	mov	r2,zero
}
 4001fc8:	e037883a 	mov	sp,fp
 4001fcc:	dfc00117 	ldw	ra,4(sp)
 4001fd0:	df000017 	ldw	fp,0(sp)
 4001fd4:	dec00204 	addi	sp,sp,8
 4001fd8:	f800283a 	ret

04001fdc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4001fdc:	defffc04 	addi	sp,sp,-16
 4001fe0:	df000315 	stw	fp,12(sp)
 4001fe4:	df000304 	addi	fp,sp,12
 4001fe8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4001fec:	00bffa04 	movi	r2,-24
 4001ff0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4001ff4:	e03ffd15 	stw	zero,-12(fp)
 4001ff8:	00001d06 	br	4002070 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 4001ffc:	00810034 	movhi	r2,1024
 4002000:	108e1f04 	addi	r2,r2,14460
 4002004:	e0fffd17 	ldw	r3,-12(fp)
 4002008:	18c00324 	muli	r3,r3,12
 400200c:	10c5883a 	add	r2,r2,r3
 4002010:	10800017 	ldw	r2,0(r2)
 4002014:	1000131e 	bne	r2,zero,4002064 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 4002018:	00810034 	movhi	r2,1024
 400201c:	108e1f04 	addi	r2,r2,14460
 4002020:	e0fffd17 	ldw	r3,-12(fp)
 4002024:	18c00324 	muli	r3,r3,12
 4002028:	10c5883a 	add	r2,r2,r3
 400202c:	e0ffff17 	ldw	r3,-4(fp)
 4002030:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4002034:	00810034 	movhi	r2,1024
 4002038:	108f8c04 	addi	r2,r2,15920
 400203c:	10c00017 	ldw	r3,0(r2)
 4002040:	e0bffd17 	ldw	r2,-12(fp)
 4002044:	1880040e 	bge	r3,r2,4002058 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 4002048:	00810034 	movhi	r2,1024
 400204c:	108f8c04 	addi	r2,r2,15920
 4002050:	e0fffd17 	ldw	r3,-12(fp)
 4002054:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 4002058:	e0bffd17 	ldw	r2,-12(fp)
 400205c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4002060:	00000606 	br	400207c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4002064:	e0bffd17 	ldw	r2,-12(fp)
 4002068:	10800044 	addi	r2,r2,1
 400206c:	e0bffd15 	stw	r2,-12(fp)
 4002070:	e0bffd17 	ldw	r2,-12(fp)
 4002074:	10800810 	cmplti	r2,r2,32
 4002078:	103fe01e 	bne	r2,zero,4001ffc <__alt_data_end+0xfc001ffc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400207c:	e0bffe17 	ldw	r2,-8(fp)
}
 4002080:	e037883a 	mov	sp,fp
 4002084:	df000017 	ldw	fp,0(sp)
 4002088:	dec00104 	addi	sp,sp,4
 400208c:	f800283a 	ret

04002090 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4002090:	defffb04 	addi	sp,sp,-20
 4002094:	df000415 	stw	fp,16(sp)
 4002098:	df000404 	addi	fp,sp,16
 400209c:	e13ffe15 	stw	r4,-8(fp)
 40020a0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 40020a4:	e0bfff17 	ldw	r2,-4(fp)
 40020a8:	10840070 	cmpltui	r2,r2,4097
 40020ac:	1000021e 	bne	r2,zero,40020b8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 40020b0:	00840004 	movi	r2,4096
 40020b4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 40020b8:	e0fffe17 	ldw	r3,-8(fp)
 40020bc:	e0bfff17 	ldw	r2,-4(fp)
 40020c0:	1885883a 	add	r2,r3,r2
 40020c4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40020c8:	e0bffe17 	ldw	r2,-8(fp)
 40020cc:	e0bffc15 	stw	r2,-16(fp)
 40020d0:	00000506 	br	40020e8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 40020d4:	e0bffc17 	ldw	r2,-16(fp)
 40020d8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40020dc:	e0bffc17 	ldw	r2,-16(fp)
 40020e0:	10800804 	addi	r2,r2,32
 40020e4:	e0bffc15 	stw	r2,-16(fp)
 40020e8:	e0fffc17 	ldw	r3,-16(fp)
 40020ec:	e0bffd17 	ldw	r2,-12(fp)
 40020f0:	18bff836 	bltu	r3,r2,40020d4 <__alt_data_end+0xfc0020d4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 40020f4:	e0bffe17 	ldw	r2,-8(fp)
 40020f8:	108007cc 	andi	r2,r2,31
 40020fc:	10000226 	beq	r2,zero,4002108 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4002100:	e0bffc17 	ldw	r2,-16(fp)
 4002104:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4002108:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 400210c:	e037883a 	mov	sp,fp
 4002110:	df000017 	ldw	fp,0(sp)
 4002114:	dec00104 	addi	sp,sp,4
 4002118:	f800283a 	ret

0400211c <atexit>:
 400211c:	200b883a 	mov	r5,r4
 4002120:	000d883a 	mov	r6,zero
 4002124:	0009883a 	mov	r4,zero
 4002128:	000f883a 	mov	r7,zero
 400212c:	40023b41 	jmpi	40023b4 <__register_exitproc>

04002130 <exit>:
 4002130:	defffe04 	addi	sp,sp,-8
 4002134:	000b883a 	mov	r5,zero
 4002138:	dc000015 	stw	r16,0(sp)
 400213c:	dfc00115 	stw	ra,4(sp)
 4002140:	2021883a 	mov	r16,r4
 4002144:	40024c80 	call	40024c8 <__call_exitprocs>
 4002148:	00810034 	movhi	r2,1024
 400214c:	108f9104 	addi	r2,r2,15940
 4002150:	11000017 	ldw	r4,0(r2)
 4002154:	20800f17 	ldw	r2,60(r4)
 4002158:	10000126 	beq	r2,zero,4002160 <exit+0x30>
 400215c:	103ee83a 	callr	r2
 4002160:	8009883a 	mov	r4,r16
 4002164:	40027880 	call	4002788 <_exit>

04002168 <memcmp>:
 4002168:	01c000c4 	movi	r7,3
 400216c:	3980192e 	bgeu	r7,r6,40021d4 <memcmp+0x6c>
 4002170:	2144b03a 	or	r2,r4,r5
 4002174:	11c4703a 	and	r2,r2,r7
 4002178:	10000f26 	beq	r2,zero,40021b8 <memcmp+0x50>
 400217c:	20800003 	ldbu	r2,0(r4)
 4002180:	28c00003 	ldbu	r3,0(r5)
 4002184:	10c0151e 	bne	r2,r3,40021dc <memcmp+0x74>
 4002188:	31bfff84 	addi	r6,r6,-2
 400218c:	01ffffc4 	movi	r7,-1
 4002190:	00000406 	br	40021a4 <memcmp+0x3c>
 4002194:	20800003 	ldbu	r2,0(r4)
 4002198:	28c00003 	ldbu	r3,0(r5)
 400219c:	31bfffc4 	addi	r6,r6,-1
 40021a0:	10c00e1e 	bne	r2,r3,40021dc <memcmp+0x74>
 40021a4:	21000044 	addi	r4,r4,1
 40021a8:	29400044 	addi	r5,r5,1
 40021ac:	31fff91e 	bne	r6,r7,4002194 <__alt_data_end+0xfc002194>
 40021b0:	0005883a 	mov	r2,zero
 40021b4:	f800283a 	ret
 40021b8:	20c00017 	ldw	r3,0(r4)
 40021bc:	28800017 	ldw	r2,0(r5)
 40021c0:	1880041e 	bne	r3,r2,40021d4 <memcmp+0x6c>
 40021c4:	31bfff04 	addi	r6,r6,-4
 40021c8:	21000104 	addi	r4,r4,4
 40021cc:	29400104 	addi	r5,r5,4
 40021d0:	39bff936 	bltu	r7,r6,40021b8 <__alt_data_end+0xfc0021b8>
 40021d4:	303fe91e 	bne	r6,zero,400217c <__alt_data_end+0xfc00217c>
 40021d8:	003ff506 	br	40021b0 <__alt_data_end+0xfc0021b0>
 40021dc:	10c5c83a 	sub	r2,r2,r3
 40021e0:	f800283a 	ret

040021e4 <memcpy>:
 40021e4:	deffff04 	addi	sp,sp,-4
 40021e8:	dc000015 	stw	r16,0(sp)
 40021ec:	00c003c4 	movi	r3,15
 40021f0:	2005883a 	mov	r2,r4
 40021f4:	1980432e 	bgeu	r3,r6,4002304 <memcpy+0x120>
 40021f8:	2146b03a 	or	r3,r4,r5
 40021fc:	18c000cc 	andi	r3,r3,3
 4002200:	1800421e 	bne	r3,zero,400230c <memcpy+0x128>
 4002204:	343ffc04 	addi	r16,r6,-16
 4002208:	8020d13a 	srli	r16,r16,4
 400220c:	28c00104 	addi	r3,r5,4
 4002210:	23400104 	addi	r13,r4,4
 4002214:	801e913a 	slli	r15,r16,4
 4002218:	2b000204 	addi	r12,r5,8
 400221c:	22c00204 	addi	r11,r4,8
 4002220:	7bc00504 	addi	r15,r15,20
 4002224:	2a800304 	addi	r10,r5,12
 4002228:	22400304 	addi	r9,r4,12
 400222c:	2bdf883a 	add	r15,r5,r15
 4002230:	2811883a 	mov	r8,r5
 4002234:	200f883a 	mov	r7,r4
 4002238:	41000017 	ldw	r4,0(r8)
 400223c:	39c00404 	addi	r7,r7,16
 4002240:	18c00404 	addi	r3,r3,16
 4002244:	393ffc15 	stw	r4,-16(r7)
 4002248:	1bbffc17 	ldw	r14,-16(r3)
 400224c:	6b400404 	addi	r13,r13,16
 4002250:	5ac00404 	addi	r11,r11,16
 4002254:	6bbffc15 	stw	r14,-16(r13)
 4002258:	63800017 	ldw	r14,0(r12)
 400225c:	4a400404 	addi	r9,r9,16
 4002260:	42000404 	addi	r8,r8,16
 4002264:	5bbffc15 	stw	r14,-16(r11)
 4002268:	53800017 	ldw	r14,0(r10)
 400226c:	63000404 	addi	r12,r12,16
 4002270:	52800404 	addi	r10,r10,16
 4002274:	4bbffc15 	stw	r14,-16(r9)
 4002278:	1bffef1e 	bne	r3,r15,4002238 <__alt_data_end+0xfc002238>
 400227c:	81c00044 	addi	r7,r16,1
 4002280:	380e913a 	slli	r7,r7,4
 4002284:	310003cc 	andi	r4,r6,15
 4002288:	02c000c4 	movi	r11,3
 400228c:	11c7883a 	add	r3,r2,r7
 4002290:	29cb883a 	add	r5,r5,r7
 4002294:	59001f2e 	bgeu	r11,r4,4002314 <memcpy+0x130>
 4002298:	1813883a 	mov	r9,r3
 400229c:	2811883a 	mov	r8,r5
 40022a0:	200f883a 	mov	r7,r4
 40022a4:	42800017 	ldw	r10,0(r8)
 40022a8:	4a400104 	addi	r9,r9,4
 40022ac:	39ffff04 	addi	r7,r7,-4
 40022b0:	4abfff15 	stw	r10,-4(r9)
 40022b4:	42000104 	addi	r8,r8,4
 40022b8:	59fffa36 	bltu	r11,r7,40022a4 <__alt_data_end+0xfc0022a4>
 40022bc:	213fff04 	addi	r4,r4,-4
 40022c0:	2008d0ba 	srli	r4,r4,2
 40022c4:	318000cc 	andi	r6,r6,3
 40022c8:	21000044 	addi	r4,r4,1
 40022cc:	2109883a 	add	r4,r4,r4
 40022d0:	2109883a 	add	r4,r4,r4
 40022d4:	1907883a 	add	r3,r3,r4
 40022d8:	290b883a 	add	r5,r5,r4
 40022dc:	30000626 	beq	r6,zero,40022f8 <memcpy+0x114>
 40022e0:	198d883a 	add	r6,r3,r6
 40022e4:	29c00003 	ldbu	r7,0(r5)
 40022e8:	18c00044 	addi	r3,r3,1
 40022ec:	29400044 	addi	r5,r5,1
 40022f0:	19ffffc5 	stb	r7,-1(r3)
 40022f4:	19bffb1e 	bne	r3,r6,40022e4 <__alt_data_end+0xfc0022e4>
 40022f8:	dc000017 	ldw	r16,0(sp)
 40022fc:	dec00104 	addi	sp,sp,4
 4002300:	f800283a 	ret
 4002304:	2007883a 	mov	r3,r4
 4002308:	003ff406 	br	40022dc <__alt_data_end+0xfc0022dc>
 400230c:	2007883a 	mov	r3,r4
 4002310:	003ff306 	br	40022e0 <__alt_data_end+0xfc0022e0>
 4002314:	200d883a 	mov	r6,r4
 4002318:	003ff006 	br	40022dc <__alt_data_end+0xfc0022dc>

0400231c <strlen>:
 400231c:	208000cc 	andi	r2,r4,3
 4002320:	10002026 	beq	r2,zero,40023a4 <strlen+0x88>
 4002324:	20800007 	ldb	r2,0(r4)
 4002328:	10002026 	beq	r2,zero,40023ac <strlen+0x90>
 400232c:	2005883a 	mov	r2,r4
 4002330:	00000206 	br	400233c <strlen+0x20>
 4002334:	10c00007 	ldb	r3,0(r2)
 4002338:	18001826 	beq	r3,zero,400239c <strlen+0x80>
 400233c:	10800044 	addi	r2,r2,1
 4002340:	10c000cc 	andi	r3,r2,3
 4002344:	183ffb1e 	bne	r3,zero,4002334 <__alt_data_end+0xfc002334>
 4002348:	10c00017 	ldw	r3,0(r2)
 400234c:	01ffbff4 	movhi	r7,65279
 4002350:	39ffbfc4 	addi	r7,r7,-257
 4002354:	00ca303a 	nor	r5,zero,r3
 4002358:	01a02074 	movhi	r6,32897
 400235c:	19c7883a 	add	r3,r3,r7
 4002360:	31a02004 	addi	r6,r6,-32640
 4002364:	1946703a 	and	r3,r3,r5
 4002368:	1986703a 	and	r3,r3,r6
 400236c:	1800091e 	bne	r3,zero,4002394 <strlen+0x78>
 4002370:	10800104 	addi	r2,r2,4
 4002374:	10c00017 	ldw	r3,0(r2)
 4002378:	19cb883a 	add	r5,r3,r7
 400237c:	00c6303a 	nor	r3,zero,r3
 4002380:	28c6703a 	and	r3,r5,r3
 4002384:	1986703a 	and	r3,r3,r6
 4002388:	183ff926 	beq	r3,zero,4002370 <__alt_data_end+0xfc002370>
 400238c:	00000106 	br	4002394 <strlen+0x78>
 4002390:	10800044 	addi	r2,r2,1
 4002394:	10c00007 	ldb	r3,0(r2)
 4002398:	183ffd1e 	bne	r3,zero,4002390 <__alt_data_end+0xfc002390>
 400239c:	1105c83a 	sub	r2,r2,r4
 40023a0:	f800283a 	ret
 40023a4:	2005883a 	mov	r2,r4
 40023a8:	003fe706 	br	4002348 <__alt_data_end+0xfc002348>
 40023ac:	0005883a 	mov	r2,zero
 40023b0:	f800283a 	ret

040023b4 <__register_exitproc>:
 40023b4:	00810034 	movhi	r2,1024
 40023b8:	defffa04 	addi	sp,sp,-24
 40023bc:	108f9104 	addi	r2,r2,15940
 40023c0:	dc000315 	stw	r16,12(sp)
 40023c4:	14000017 	ldw	r16,0(r2)
 40023c8:	dc400415 	stw	r17,16(sp)
 40023cc:	dfc00515 	stw	ra,20(sp)
 40023d0:	80805217 	ldw	r2,328(r16)
 40023d4:	2023883a 	mov	r17,r4
 40023d8:	10003626 	beq	r2,zero,40024b4 <__register_exitproc+0x100>
 40023dc:	10c00117 	ldw	r3,4(r2)
 40023e0:	010007c4 	movi	r4,31
 40023e4:	20c00e16 	blt	r4,r3,4002420 <__register_exitproc+0x6c>
 40023e8:	1a400044 	addi	r9,r3,1
 40023ec:	8800211e 	bne	r17,zero,4002474 <__register_exitproc+0xc0>
 40023f0:	18c00084 	addi	r3,r3,2
 40023f4:	18c7883a 	add	r3,r3,r3
 40023f8:	18c7883a 	add	r3,r3,r3
 40023fc:	12400115 	stw	r9,4(r2)
 4002400:	10c7883a 	add	r3,r2,r3
 4002404:	19400015 	stw	r5,0(r3)
 4002408:	0005883a 	mov	r2,zero
 400240c:	dfc00517 	ldw	ra,20(sp)
 4002410:	dc400417 	ldw	r17,16(sp)
 4002414:	dc000317 	ldw	r16,12(sp)
 4002418:	dec00604 	addi	sp,sp,24
 400241c:	f800283a 	ret
 4002420:	00800034 	movhi	r2,0
 4002424:	10800004 	addi	r2,r2,0
 4002428:	10002526 	beq	r2,zero,40024c0 <__register_exitproc+0x10c>
 400242c:	01006404 	movi	r4,400
 4002430:	d9400015 	stw	r5,0(sp)
 4002434:	d9800115 	stw	r6,4(sp)
 4002438:	d9c00215 	stw	r7,8(sp)
 400243c:	00000000 	call	0 <__reset-0x4000000>
 4002440:	d9400017 	ldw	r5,0(sp)
 4002444:	d9800117 	ldw	r6,4(sp)
 4002448:	d9c00217 	ldw	r7,8(sp)
 400244c:	10001c26 	beq	r2,zero,40024c0 <__register_exitproc+0x10c>
 4002450:	80c05217 	ldw	r3,328(r16)
 4002454:	10000115 	stw	zero,4(r2)
 4002458:	02400044 	movi	r9,1
 400245c:	10c00015 	stw	r3,0(r2)
 4002460:	80805215 	stw	r2,328(r16)
 4002464:	10006215 	stw	zero,392(r2)
 4002468:	10006315 	stw	zero,396(r2)
 400246c:	0007883a 	mov	r3,zero
 4002470:	883fdf26 	beq	r17,zero,40023f0 <__alt_data_end+0xfc0023f0>
 4002474:	18d1883a 	add	r8,r3,r3
 4002478:	4211883a 	add	r8,r8,r8
 400247c:	1211883a 	add	r8,r2,r8
 4002480:	41802215 	stw	r6,136(r8)
 4002484:	01000044 	movi	r4,1
 4002488:	11806217 	ldw	r6,392(r2)
 400248c:	20c8983a 	sll	r4,r4,r3
 4002490:	310cb03a 	or	r6,r6,r4
 4002494:	11806215 	stw	r6,392(r2)
 4002498:	41c04215 	stw	r7,264(r8)
 400249c:	01800084 	movi	r6,2
 40024a0:	89bfd31e 	bne	r17,r6,40023f0 <__alt_data_end+0xfc0023f0>
 40024a4:	11806317 	ldw	r6,396(r2)
 40024a8:	3108b03a 	or	r4,r6,r4
 40024ac:	11006315 	stw	r4,396(r2)
 40024b0:	003fcf06 	br	40023f0 <__alt_data_end+0xfc0023f0>
 40024b4:	80805304 	addi	r2,r16,332
 40024b8:	80805215 	stw	r2,328(r16)
 40024bc:	003fc706 	br	40023dc <__alt_data_end+0xfc0023dc>
 40024c0:	00bfffc4 	movi	r2,-1
 40024c4:	003fd106 	br	400240c <__alt_data_end+0xfc00240c>

040024c8 <__call_exitprocs>:
 40024c8:	00810034 	movhi	r2,1024
 40024cc:	108f9104 	addi	r2,r2,15940
 40024d0:	10800017 	ldw	r2,0(r2)
 40024d4:	defff404 	addi	sp,sp,-48
 40024d8:	dd800815 	stw	r22,32(sp)
 40024dc:	d8800015 	stw	r2,0(sp)
 40024e0:	10805204 	addi	r2,r2,328
 40024e4:	dd000615 	stw	r20,24(sp)
 40024e8:	dc800415 	stw	r18,16(sp)
 40024ec:	dfc00b15 	stw	ra,44(sp)
 40024f0:	df000a15 	stw	fp,40(sp)
 40024f4:	ddc00915 	stw	r23,36(sp)
 40024f8:	dd400715 	stw	r21,28(sp)
 40024fc:	dcc00515 	stw	r19,20(sp)
 4002500:	dc400315 	stw	r17,12(sp)
 4002504:	dc000215 	stw	r16,8(sp)
 4002508:	2025883a 	mov	r18,r4
 400250c:	2829883a 	mov	r20,r5
 4002510:	d8800115 	stw	r2,4(sp)
 4002514:	05bfffc4 	movi	r22,-1
 4002518:	d8800017 	ldw	r2,0(sp)
 400251c:	14c05217 	ldw	r19,328(r2)
 4002520:	98001d26 	beq	r19,zero,4002598 <__call_exitprocs+0xd0>
 4002524:	dd400117 	ldw	r21,4(sp)
 4002528:	98800117 	ldw	r2,4(r19)
 400252c:	173fffc4 	addi	fp,r2,-1
 4002530:	e0000d16 	blt	fp,zero,4002568 <__call_exitprocs+0xa0>
 4002534:	14000044 	addi	r16,r2,1
 4002538:	8421883a 	add	r16,r16,r16
 400253c:	8421883a 	add	r16,r16,r16
 4002540:	84402004 	addi	r17,r16,128
 4002544:	9c63883a 	add	r17,r19,r17
 4002548:	9c21883a 	add	r16,r19,r16
 400254c:	a0001e26 	beq	r20,zero,40025c8 <__call_exitprocs+0x100>
 4002550:	80804017 	ldw	r2,256(r16)
 4002554:	15001c26 	beq	r2,r20,40025c8 <__call_exitprocs+0x100>
 4002558:	e73fffc4 	addi	fp,fp,-1
 400255c:	843fff04 	addi	r16,r16,-4
 4002560:	8c7fff04 	addi	r17,r17,-4
 4002564:	e5bff91e 	bne	fp,r22,400254c <__alt_data_end+0xfc00254c>
 4002568:	00800034 	movhi	r2,0
 400256c:	10800004 	addi	r2,r2,0
 4002570:	10000926 	beq	r2,zero,4002598 <__call_exitprocs+0xd0>
 4002574:	98800117 	ldw	r2,4(r19)
 4002578:	1000311e 	bne	r2,zero,4002640 <__call_exitprocs+0x178>
 400257c:	98800017 	ldw	r2,0(r19)
 4002580:	10003426 	beq	r2,zero,4002654 <__call_exitprocs+0x18c>
 4002584:	9809883a 	mov	r4,r19
 4002588:	a8800015 	stw	r2,0(r21)
 400258c:	00000000 	call	0 <__reset-0x4000000>
 4002590:	acc00017 	ldw	r19,0(r21)
 4002594:	983fe41e 	bne	r19,zero,4002528 <__alt_data_end+0xfc002528>
 4002598:	dfc00b17 	ldw	ra,44(sp)
 400259c:	df000a17 	ldw	fp,40(sp)
 40025a0:	ddc00917 	ldw	r23,36(sp)
 40025a4:	dd800817 	ldw	r22,32(sp)
 40025a8:	dd400717 	ldw	r21,28(sp)
 40025ac:	dd000617 	ldw	r20,24(sp)
 40025b0:	dcc00517 	ldw	r19,20(sp)
 40025b4:	dc800417 	ldw	r18,16(sp)
 40025b8:	dc400317 	ldw	r17,12(sp)
 40025bc:	dc000217 	ldw	r16,8(sp)
 40025c0:	dec00c04 	addi	sp,sp,48
 40025c4:	f800283a 	ret
 40025c8:	98800117 	ldw	r2,4(r19)
 40025cc:	80c00017 	ldw	r3,0(r16)
 40025d0:	10bfffc4 	addi	r2,r2,-1
 40025d4:	17001526 	beq	r2,fp,400262c <__call_exitprocs+0x164>
 40025d8:	80000015 	stw	zero,0(r16)
 40025dc:	183fde26 	beq	r3,zero,4002558 <__alt_data_end+0xfc002558>
 40025e0:	00800044 	movi	r2,1
 40025e4:	1708983a 	sll	r4,r2,fp
 40025e8:	98806217 	ldw	r2,392(r19)
 40025ec:	9dc00117 	ldw	r23,4(r19)
 40025f0:	2084703a 	and	r2,r4,r2
 40025f4:	1000061e 	bne	r2,zero,4002610 <__call_exitprocs+0x148>
 40025f8:	183ee83a 	callr	r3
 40025fc:	98800117 	ldw	r2,4(r19)
 4002600:	15ffc51e 	bne	r2,r23,4002518 <__alt_data_end+0xfc002518>
 4002604:	a8800017 	ldw	r2,0(r21)
 4002608:	14ffd326 	beq	r2,r19,4002558 <__alt_data_end+0xfc002558>
 400260c:	003fc206 	br	4002518 <__alt_data_end+0xfc002518>
 4002610:	98806317 	ldw	r2,396(r19)
 4002614:	2084703a 	and	r2,r4,r2
 4002618:	1000061e 	bne	r2,zero,4002634 <__call_exitprocs+0x16c>
 400261c:	89400017 	ldw	r5,0(r17)
 4002620:	9009883a 	mov	r4,r18
 4002624:	183ee83a 	callr	r3
 4002628:	003ff406 	br	40025fc <__alt_data_end+0xfc0025fc>
 400262c:	9f000115 	stw	fp,4(r19)
 4002630:	003fea06 	br	40025dc <__alt_data_end+0xfc0025dc>
 4002634:	89000017 	ldw	r4,0(r17)
 4002638:	183ee83a 	callr	r3
 400263c:	003fef06 	br	40025fc <__alt_data_end+0xfc0025fc>
 4002640:	98800017 	ldw	r2,0(r19)
 4002644:	982b883a 	mov	r21,r19
 4002648:	1027883a 	mov	r19,r2
 400264c:	983fb61e 	bne	r19,zero,4002528 <__alt_data_end+0xfc002528>
 4002650:	003fd106 	br	4002598 <__alt_data_end+0xfc002598>
 4002654:	0005883a 	mov	r2,zero
 4002658:	003ffa06 	br	4002644 <__alt_data_end+0xfc002644>

0400265c <udivmodsi4>:
 400265c:	2900182e 	bgeu	r5,r4,40026c0 <udivmodsi4+0x64>
 4002660:	28001716 	blt	r5,zero,40026c0 <udivmodsi4+0x64>
 4002664:	00800804 	movi	r2,32
 4002668:	00c00044 	movi	r3,1
 400266c:	00000206 	br	4002678 <udivmodsi4+0x1c>
 4002670:	10001126 	beq	r2,zero,40026b8 <udivmodsi4+0x5c>
 4002674:	28000516 	blt	r5,zero,400268c <udivmodsi4+0x30>
 4002678:	294b883a 	add	r5,r5,r5
 400267c:	10bfffc4 	addi	r2,r2,-1
 4002680:	18c7883a 	add	r3,r3,r3
 4002684:	293ffa36 	bltu	r5,r4,4002670 <__alt_data_end+0xfc002670>
 4002688:	18000b26 	beq	r3,zero,40026b8 <udivmodsi4+0x5c>
 400268c:	0005883a 	mov	r2,zero
 4002690:	21400236 	bltu	r4,r5,400269c <udivmodsi4+0x40>
 4002694:	2149c83a 	sub	r4,r4,r5
 4002698:	10c4b03a 	or	r2,r2,r3
 400269c:	1806d07a 	srli	r3,r3,1
 40026a0:	280ad07a 	srli	r5,r5,1
 40026a4:	183ffa1e 	bne	r3,zero,4002690 <__alt_data_end+0xfc002690>
 40026a8:	3000011e 	bne	r6,zero,40026b0 <udivmodsi4+0x54>
 40026ac:	f800283a 	ret
 40026b0:	2005883a 	mov	r2,r4
 40026b4:	f800283a 	ret
 40026b8:	0005883a 	mov	r2,zero
 40026bc:	003ffa06 	br	40026a8 <__alt_data_end+0xfc0026a8>
 40026c0:	00c00044 	movi	r3,1
 40026c4:	003ff106 	br	400268c <__alt_data_end+0xfc00268c>

040026c8 <__divsi3>:
 40026c8:	defffe04 	addi	sp,sp,-8
 40026cc:	dfc00115 	stw	ra,4(sp)
 40026d0:	dc000015 	stw	r16,0(sp)
 40026d4:	20000b16 	blt	r4,zero,4002704 <__divsi3+0x3c>
 40026d8:	0021883a 	mov	r16,zero
 40026dc:	28000c16 	blt	r5,zero,4002710 <__divsi3+0x48>
 40026e0:	000d883a 	mov	r6,zero
 40026e4:	400265c0 	call	400265c <udivmodsi4>
 40026e8:	0407c83a 	sub	r3,zero,r16
 40026ec:	1884f03a 	xor	r2,r3,r2
 40026f0:	1405883a 	add	r2,r2,r16
 40026f4:	dfc00117 	ldw	ra,4(sp)
 40026f8:	dc000017 	ldw	r16,0(sp)
 40026fc:	dec00204 	addi	sp,sp,8
 4002700:	f800283a 	ret
 4002704:	0109c83a 	sub	r4,zero,r4
 4002708:	04000044 	movi	r16,1
 400270c:	283ff40e 	bge	r5,zero,40026e0 <__alt_data_end+0xfc0026e0>
 4002710:	014bc83a 	sub	r5,zero,r5
 4002714:	8400005c 	xori	r16,r16,1
 4002718:	003ff106 	br	40026e0 <__alt_data_end+0xfc0026e0>

0400271c <__modsi3>:
 400271c:	defffd04 	addi	sp,sp,-12
 4002720:	dfc00215 	stw	ra,8(sp)
 4002724:	dc400115 	stw	r17,4(sp)
 4002728:	dc000015 	stw	r16,0(sp)
 400272c:	20000c16 	blt	r4,zero,4002760 <__modsi3+0x44>
 4002730:	0023883a 	mov	r17,zero
 4002734:	0021883a 	mov	r16,zero
 4002738:	28000d16 	blt	r5,zero,4002770 <__modsi3+0x54>
 400273c:	01800044 	movi	r6,1
 4002740:	400265c0 	call	400265c <udivmodsi4>
 4002744:	1404f03a 	xor	r2,r2,r16
 4002748:	8885883a 	add	r2,r17,r2
 400274c:	dfc00217 	ldw	ra,8(sp)
 4002750:	dc400117 	ldw	r17,4(sp)
 4002754:	dc000017 	ldw	r16,0(sp)
 4002758:	dec00304 	addi	sp,sp,12
 400275c:	f800283a 	ret
 4002760:	0109c83a 	sub	r4,zero,r4
 4002764:	04400044 	movi	r17,1
 4002768:	043fffc4 	movi	r16,-1
 400276c:	283ff30e 	bge	r5,zero,400273c <__alt_data_end+0xfc00273c>
 4002770:	014bc83a 	sub	r5,zero,r5
 4002774:	003ff106 	br	400273c <__alt_data_end+0xfc00273c>

04002778 <__udivsi3>:
 4002778:	000d883a 	mov	r6,zero
 400277c:	400265c1 	jmpi	400265c <udivmodsi4>

04002780 <__umodsi3>:
 4002780:	01800044 	movi	r6,1
 4002784:	400265c1 	jmpi	400265c <udivmodsi4>

04002788 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4002788:	defffd04 	addi	sp,sp,-12
 400278c:	df000215 	stw	fp,8(sp)
 4002790:	df000204 	addi	fp,sp,8
 4002794:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4002798:	0001883a 	nop
 400279c:	e0bfff17 	ldw	r2,-4(fp)
 40027a0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 40027a4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40027a8:	10000226 	beq	r2,zero,40027b4 <_exit+0x2c>
    ALT_SIM_FAIL();
 40027ac:	002af070 	cmpltui	zero,zero,43969
 40027b0:	00000106 	br	40027b8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 40027b4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 40027b8:	003fff06 	br	40027b8 <__alt_data_end+0xfc0027b8>
